<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.hazelcast.platform.demos.telco</groupId>
		<artifactId>telco-root</artifactId>
		<version>4.0</version>
	</parent>

	<groupId>com.hazelcast.platform.demos.telco.churn</groupId>
	<artifactId>churn-root</artifactId>
	<packaging>pom</packaging>

	<name>Hazelcast Platform - Telco - Churn</name>
	<description>Uses ML to predict customer churn</description>

	<properties>
		<docker.image.prefix>churn</docker.image.prefix>
		<main.basedir>${project.parent.parent.basedir}</main.basedir>

		<my.cluster1.init.size>1</my.cluster1.init.size>
		<my.cluster1.name>sanmateo</my.cluster1.name>

		<!-- Common logons for Management Center, Grafana, Prometheus -->
		<my.other.admin.user>admin</my.other.admin.user>
		<my.other.admin.password>password1</my.other.admin.password>
		<my.other.admin.database>${docker.image.prefix}</my.other.admin.database>

		<!-- So Grafana can find Prometheus service, must match K8S YAML -->
		<my.prometheus.name>${docker.image.prefix}-prometheus</my.prometheus.name>
		<my.prometheus.port>9090</my.prometheus.port>
		<my.management.center.name>${docker.image.prefix}-management-center</my.management.center.name>
	</properties>

	<modules>
		<!-- Standalone, not part of Hazelcast -->
		<module>cassandra</module>
		<module>grafana</module>
		<module>kafdrop</module>
		<module>kafka-broker</module>
		<module>kafka-connect</module>
		<module>prometheus</module>
		<module>mongo</module>
		<module>mysql</module>
		<module>zookeeper</module>

		<!-- Shared with legacy preloader and Hazelcast bits -->
		<module>common</module>
		<module>common-cassandra</module>
		<module>common-mongo</module>
		<module>common-mysql</module>

		<!-- Add test data to Cassandra/Mongo/MySql -->
		<module>topic-create</module>
		<module>data-feed</module>
		<module>preload-legacy</module>
		<module>update-legacy</module>

		<!-- Hazelcast bits -->
		<module>hazelcast-node</module>
		<module>abstract-client</module>
		<module>java-client</module>
		<module>jet-jobs</module>
		<module>slack-integration</module>
		<module>integration-tests</module>
		<module>management-center</module>
	</modules>

	<dependencies>
		<!-- Required for YAML style Log4j2 config -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>

		<dependency>
			<groupId>net.minidev</groupId>
			<artifactId>json-smart</artifactId>
		</dependency>

		<!-- Validates configuration properties -->
		<dependency>
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>

		<!-- For loading build properties -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
		</dependency>
		<!-- Log4j2 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
		<!-- Kubernetes uses REST to validate containers -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- Easy reading from Kafka -->
		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<type>pom</type>
				<scope>import</scope>
				<version>${spring-boot.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

</project>
