<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

        <parent>
                <groupId>com.hazelcast.platform.demos.telco.churn</groupId>
                <artifactId>churn-root</artifactId>
                <version>4.0</version>
        </parent>

	<artifactId>churn-java-client</artifactId>

	<name>Hazelcast Platform - Churn - Hazelcast Java Client</name>
	<description>Telco Churn - Hazelcast Java Client</description>

	<properties>
		<docker.image.name>java-client</docker.image.name>
		<docker.jar.file>${project.artifactId}-${project.version}.jar</docker.jar.file>
		<main.basedir>${project.parent.parent.parent.basedir}</main.basedir>
		<my.cluster.name>${my.cluster1.name}</my.cluster.name>

		<!-- For src/main/resources/templates/fragments.html -->
		<my.webapp.title>${project.description}</my.webapp.title>

		<!-- React.js app in src/main/app -->
		<frontend.app.dir>${project.basedir}/src/main/app</frontend.app.dir>
		<node.version>v12.16.2</node.version>
		<npm.version>6.14.4</npm.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>churn-abstract-client</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>com.hazelcast.jet</groupId>
			<artifactId>hazelcast-jet-enterprise</artifactId>
		</dependency>
		<dependency>
			<groupId>com.hazelcast</groupId>
			<artifactId>hazelcast-kubernetes</artifactId>
		</dependency>
		<dependency>
			<groupId>com.hazelcast.jet.contrib</groupId>
			<artifactId>hazelcast-jet-spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<!-- Exclude in favour of hazelcast-jet-enterprise -->
					<groupId>com.hazelcast.jet</groupId>
					<artifactId>hazelcast-jet</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<!-- Remove previous node builds if "mvn clean" -->
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>${frontend.app.dir}/node_modules</directory>
							<includes>
								<include>**</include>
							</includes>
						</fileset>
						<fileset>
							<directory>${frontend.app.dir}/static</directory>
							<includes>
								<include>**</include>
							</includes>
						</fileset>
					</filesets>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<configuration>
					<!-- Find "package.json" and create "node_modules" -->
					<workingDirectory>${frontend.app.dir}</workingDirectory>
					<!-- Install to "target" -->
					<installDirectory>${project.build.directory}</installDirectory>
					<environmentVariables>
						<SCARF_ANALYTICS>false</SCARF_ANALYTICS>
					</environmentVariables>
				</configuration>
				<executions>
					<execution>
						<id>install-node-and-npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<configuration>
							<nodeVersion>${node.version}</nodeVersion>
							<npmVersion>${npm.version}</npmVersion>
						</configuration>
					</execution>
					<execution>
						<id>npm-install</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>
					<execution>
						<id>webpack-build</id>
						<goals>
							<goal>webpack</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<phase>prepare-package</phase>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}/static</outputDirectory>
							<resources>
								<resource>
									<directory>${frontend.app.dir}/static</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
</project>
