<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.hazelcast.platform.demos.banking.trade.monitor</groupId>
		<artifactId>trade-monitor-root</artifactId>
		<version>4.0</version>
	</parent>

	<artifactId>trade-monitor-webapp</artifactId>

	<name>Hazelcast Platform - Trade Monitor - Webapp</name>
	<description>Trade Monitor - Web Application</description>

	<properties>
		<docker.image.name>webapp</docker.image.name>
		<docker.jar.file>${project.artifactId}-${project.version}-jar-with-dependencies.jar</docker.jar.file>
		<main.basedir>${project.parent.parent.parent.basedir}</main.basedir>
		<main.class>com.hazelcast.platform.demos.banking.trademonitor.Application</main.class>

		<!-- See comment on maven-resources-plugin -->
        <frontend.app.dir>${project.basedir}/src/main/app</frontend.app.dir>
	
		<node.version>v12.16.1</node.version>
		<yarn.version>v1.22.0</yarn.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>trade-monitor-common</artifactId>
			<version>${project.version}</version>
		</dependency>

		<dependency>
			<groupId>com.hazelcast.jet</groupId>
			<artifactId>hazelcast-jet</artifactId>
		</dependency>
		<dependency>
			<groupId>com.hazelcast</groupId>
			<artifactId>hazelcast-kubernetes</artifactId>
		</dependency>

		<dependency>
			<groupId>io.javalin</groupId>
			<artifactId>javalin</artifactId>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
	
		<plugins>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<configuration>
					<nodeVersion>${node.version}</nodeVersion>
					<yarnVersion>${yarn.version}</yarnVersion>
					<workingDirectory>${frontend.app.dir}</workingDirectory>
					<installDirectory>${project.build.directory}</installDirectory>
				</configuration>
				<executions>
					<execution>
						<id>install-frontend-tools</id>
						<goals>
							<goal>install-node-and-yarn</goal>
						</goals>
					</execution>
					<execution>
						<id>yarn-install</id>
						<goals>
							<goal>yarn</goal>
						</goals>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>
					<execution>
						<id>build-frontend</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>yarn</goal>
						</goals>
						<configuration>
							<arguments>build</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This resources plugin is a very important step, its job is to take 
				the client application artifacts built by the frontend plugin and copy them 
				to the "right place". The "right place" to copy the artifacts to, and where 
				to copy them from, can change depending on which client framework is being 
				used. For all client frameworks: - client application root is "src/main/app" 
				- install directory is the Maven ${project.build.directory} which will translate 
				to "target/classes" Note that "app" is an arbitrary choice, it could be something 
				else if you wanted - so long as you change it everywhere. For ReactJS: - 
				react-scripts build default output directory is "<app-root>/build", so "src/main/app/build" 
				- directory to copy the built application to is "target/classes/app" - the 
				Java router code uses this "app" directory on the classpath The "app" directory 
				on the classpath is used so as to partition the client application from any 
				other classes and resources that may be part of the application. Again, the 
				choice of "app" here is arbitrary and you can choose something else if you 
				want - so long as you change the Java routing configuration. -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<phase>prepare-package</phase>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}/app</outputDirectory>
							<resources>
								<resource>
									<directory>${frontend.app.dir}/build</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>dockerfile-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
