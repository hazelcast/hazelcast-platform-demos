// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: curve.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_curve_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_curve_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_curve_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_curve_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_curve_2eproto;
namespace FlumaionQL {
class Curve;
class CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
}  // namespace FlumaionQL
PROTOBUF_NAMESPACE_OPEN
template<> ::FlumaionQL::Curve* Arena::CreateMaybeMessage<::FlumaionQL::Curve>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FlumaionQL {

// ===================================================================

class Curve :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FlumaionQL.Curve) */ {
 public:
  Curve();
  virtual ~Curve();

  Curve(const Curve& from);
  Curve(Curve&& from) noexcept
    : Curve() {
    *this = ::std::move(from);
  }

  inline Curve& operator=(const Curve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Curve& operator=(Curve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Curve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Curve* internal_default_instance() {
    return reinterpret_cast<const Curve*>(
               &_Curve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Curve& a, Curve& b) {
    a.Swap(&b);
  }
  inline void Swap(Curve* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Curve* New() const final {
    return CreateMaybeMessage<Curve>(nullptr);
  }

  Curve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Curve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Curve& from);
  void MergeFrom(const Curve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Curve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FlumaionQL.Curve";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_curve_2eproto);
    return ::descriptor_table_curve_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaturityPeriodValueFieldNumber = 10,
    kMaturityPeriodTypeFieldNumber = 11,
    kRatesFieldNumber = 12,
    kCurvenameFieldNumber = 1,
    kIndexFieldNumber = 2,
    kCalendarFieldNumber = 5,
    kDccFieldNumber = 7,
    kIndexFrequencyTypeFieldNumber = 4,
    kIndexFrequencyFieldNumber = 3,
    kBussinessConventionFieldNumber = 6,
    kEndOfMonthFlagFieldNumber = 8,
    kSettlementDaysFieldNumber = 9,
  };
  // repeated int32 maturity_period_value = 10;
  int maturity_period_value_size() const;
  private:
  int _internal_maturity_period_value_size() const;
  public:
  void clear_maturity_period_value();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maturity_period_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_maturity_period_value() const;
  void _internal_add_maturity_period_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_maturity_period_value();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 maturity_period_value(int index) const;
  void set_maturity_period_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_maturity_period_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      maturity_period_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_maturity_period_value();

  // repeated int32 maturity_period_type = 11;
  int maturity_period_type_size() const;
  private:
  int _internal_maturity_period_type_size() const;
  public:
  void clear_maturity_period_type();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maturity_period_type(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_maturity_period_type() const;
  void _internal_add_maturity_period_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_maturity_period_type();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 maturity_period_type(int index) const;
  void set_maturity_period_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_maturity_period_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      maturity_period_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_maturity_period_type();

  // repeated float rates = 12;
  int rates_size() const;
  private:
  int _internal_rates_size() const;
  public:
  void clear_rates();
  private:
  float _internal_rates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rates() const;
  void _internal_add_rates(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rates();
  public:
  float rates(int index) const;
  void set_rates(int index, float value);
  void add_rates(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rates();

  // string curvename = 1;
  void clear_curvename();
  const std::string& curvename() const;
  void set_curvename(const std::string& value);
  void set_curvename(std::string&& value);
  void set_curvename(const char* value);
  void set_curvename(const char* value, size_t size);
  std::string* mutable_curvename();
  std::string* release_curvename();
  void set_allocated_curvename(std::string* curvename);
  private:
  const std::string& _internal_curvename() const;
  void _internal_set_curvename(const std::string& value);
  std::string* _internal_mutable_curvename();
  public:

  // string index = 2;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // string calendar = 5;
  void clear_calendar();
  const std::string& calendar() const;
  void set_calendar(const std::string& value);
  void set_calendar(std::string&& value);
  void set_calendar(const char* value);
  void set_calendar(const char* value, size_t size);
  std::string* mutable_calendar();
  std::string* release_calendar();
  void set_allocated_calendar(std::string* calendar);
  private:
  const std::string& _internal_calendar() const;
  void _internal_set_calendar(const std::string& value);
  std::string* _internal_mutable_calendar();
  public:

  // string dcc = 7;
  void clear_dcc();
  const std::string& dcc() const;
  void set_dcc(const std::string& value);
  void set_dcc(std::string&& value);
  void set_dcc(const char* value);
  void set_dcc(const char* value, size_t size);
  std::string* mutable_dcc();
  std::string* release_dcc();
  void set_allocated_dcc(std::string* dcc);
  private:
  const std::string& _internal_dcc() const;
  void _internal_set_dcc(const std::string& value);
  std::string* _internal_mutable_dcc();
  public:

  // int64 index_frequency_type = 4;
  void clear_index_frequency_type();
  ::PROTOBUF_NAMESPACE_ID::int64 index_frequency_type() const;
  void set_index_frequency_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index_frequency_type() const;
  void _internal_set_index_frequency_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 index_frequency = 3;
  void clear_index_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 index_frequency() const;
  void set_index_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index_frequency() const;
  void _internal_set_index_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bussiness_convention = 6;
  void clear_bussiness_convention();
  ::PROTOBUF_NAMESPACE_ID::int32 bussiness_convention() const;
  void set_bussiness_convention(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bussiness_convention() const;
  void _internal_set_bussiness_convention(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool end_of_month_flag = 8;
  void clear_end_of_month_flag();
  bool end_of_month_flag() const;
  void set_end_of_month_flag(bool value);
  private:
  bool _internal_end_of_month_flag() const;
  void _internal_set_end_of_month_flag(bool value);
  public:

  // int32 settlement_days = 9;
  void clear_settlement_days();
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_days() const;
  void set_settlement_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_settlement_days() const;
  void _internal_set_settlement_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FlumaionQL.Curve)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > maturity_period_value_;
  mutable std::atomic<int> _maturity_period_value_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > maturity_period_type_;
  mutable std::atomic<int> _maturity_period_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rates_;
  mutable std::atomic<int> _rates_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr curvename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calendar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dcc_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_frequency_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_frequency_;
  ::PROTOBUF_NAMESPACE_ID::int32 bussiness_convention_;
  bool end_of_month_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_days_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_curve_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Curve

// string curvename = 1;
inline void Curve::clear_curvename() {
  curvename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Curve::curvename() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.curvename)
  return _internal_curvename();
}
inline void Curve::set_curvename(const std::string& value) {
  _internal_set_curvename(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.curvename)
}
inline std::string* Curve::mutable_curvename() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.Curve.curvename)
  return _internal_mutable_curvename();
}
inline const std::string& Curve::_internal_curvename() const {
  return curvename_.GetNoArena();
}
inline void Curve::_internal_set_curvename(const std::string& value) {
  
  curvename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Curve::set_curvename(std::string&& value) {
  
  curvename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.Curve.curvename)
}
inline void Curve::set_curvename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  curvename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlumaionQL.Curve.curvename)
}
inline void Curve::set_curvename(const char* value, size_t size) {
  
  curvename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.Curve.curvename)
}
inline std::string* Curve::_internal_mutable_curvename() {
  
  return curvename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Curve::release_curvename() {
  // @@protoc_insertion_point(field_release:FlumaionQL.Curve.curvename)
  
  return curvename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Curve::set_allocated_curvename(std::string* curvename) {
  if (curvename != nullptr) {
    
  } else {
    
  }
  curvename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), curvename);
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.Curve.curvename)
}

// string index = 2;
inline void Curve::clear_index() {
  index_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Curve::index() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.index)
  return _internal_index();
}
inline void Curve::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.index)
}
inline std::string* Curve::mutable_index() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.Curve.index)
  return _internal_mutable_index();
}
inline const std::string& Curve::_internal_index() const {
  return index_.GetNoArena();
}
inline void Curve::_internal_set_index(const std::string& value) {
  
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Curve::set_index(std::string&& value) {
  
  index_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.Curve.index)
}
inline void Curve::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlumaionQL.Curve.index)
}
inline void Curve::set_index(const char* value, size_t size) {
  
  index_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.Curve.index)
}
inline std::string* Curve::_internal_mutable_index() {
  
  return index_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Curve::release_index() {
  // @@protoc_insertion_point(field_release:FlumaionQL.Curve.index)
  
  return index_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Curve::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index);
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.Curve.index)
}

// int32 index_frequency = 3;
inline void Curve::clear_index_frequency() {
  index_frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::_internal_index_frequency() const {
  return index_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::index_frequency() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.index_frequency)
  return _internal_index_frequency();
}
inline void Curve::_internal_set_index_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_frequency_ = value;
}
inline void Curve::set_index_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index_frequency(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.index_frequency)
}

// int64 index_frequency_type = 4;
inline void Curve::clear_index_frequency_type() {
  index_frequency_type_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Curve::_internal_index_frequency_type() const {
  return index_frequency_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Curve::index_frequency_type() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.index_frequency_type)
  return _internal_index_frequency_type();
}
inline void Curve::_internal_set_index_frequency_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  index_frequency_type_ = value;
}
inline void Curve::set_index_frequency_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index_frequency_type(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.index_frequency_type)
}

// string calendar = 5;
inline void Curve::clear_calendar() {
  calendar_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Curve::calendar() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.calendar)
  return _internal_calendar();
}
inline void Curve::set_calendar(const std::string& value) {
  _internal_set_calendar(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.calendar)
}
inline std::string* Curve::mutable_calendar() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.Curve.calendar)
  return _internal_mutable_calendar();
}
inline const std::string& Curve::_internal_calendar() const {
  return calendar_.GetNoArena();
}
inline void Curve::_internal_set_calendar(const std::string& value) {
  
  calendar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Curve::set_calendar(std::string&& value) {
  
  calendar_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.Curve.calendar)
}
inline void Curve::set_calendar(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  calendar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlumaionQL.Curve.calendar)
}
inline void Curve::set_calendar(const char* value, size_t size) {
  
  calendar_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.Curve.calendar)
}
inline std::string* Curve::_internal_mutable_calendar() {
  
  return calendar_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Curve::release_calendar() {
  // @@protoc_insertion_point(field_release:FlumaionQL.Curve.calendar)
  
  return calendar_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Curve::set_allocated_calendar(std::string* calendar) {
  if (calendar != nullptr) {
    
  } else {
    
  }
  calendar_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calendar);
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.Curve.calendar)
}

// int32 bussiness_convention = 6;
inline void Curve::clear_bussiness_convention() {
  bussiness_convention_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::_internal_bussiness_convention() const {
  return bussiness_convention_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::bussiness_convention() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.bussiness_convention)
  return _internal_bussiness_convention();
}
inline void Curve::_internal_set_bussiness_convention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bussiness_convention_ = value;
}
inline void Curve::set_bussiness_convention(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bussiness_convention(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.bussiness_convention)
}

// string dcc = 7;
inline void Curve::clear_dcc() {
  dcc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Curve::dcc() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.dcc)
  return _internal_dcc();
}
inline void Curve::set_dcc(const std::string& value) {
  _internal_set_dcc(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.dcc)
}
inline std::string* Curve::mutable_dcc() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.Curve.dcc)
  return _internal_mutable_dcc();
}
inline const std::string& Curve::_internal_dcc() const {
  return dcc_.GetNoArena();
}
inline void Curve::_internal_set_dcc(const std::string& value) {
  
  dcc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Curve::set_dcc(std::string&& value) {
  
  dcc_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.Curve.dcc)
}
inline void Curve::set_dcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dcc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FlumaionQL.Curve.dcc)
}
inline void Curve::set_dcc(const char* value, size_t size) {
  
  dcc_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.Curve.dcc)
}
inline std::string* Curve::_internal_mutable_dcc() {
  
  return dcc_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Curve::release_dcc() {
  // @@protoc_insertion_point(field_release:FlumaionQL.Curve.dcc)
  
  return dcc_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Curve::set_allocated_dcc(std::string* dcc) {
  if (dcc != nullptr) {
    
  } else {
    
  }
  dcc_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dcc);
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.Curve.dcc)
}

// bool end_of_month_flag = 8;
inline void Curve::clear_end_of_month_flag() {
  end_of_month_flag_ = false;
}
inline bool Curve::_internal_end_of_month_flag() const {
  return end_of_month_flag_;
}
inline bool Curve::end_of_month_flag() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.end_of_month_flag)
  return _internal_end_of_month_flag();
}
inline void Curve::_internal_set_end_of_month_flag(bool value) {
  
  end_of_month_flag_ = value;
}
inline void Curve::set_end_of_month_flag(bool value) {
  _internal_set_end_of_month_flag(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.end_of_month_flag)
}

// int32 settlement_days = 9;
inline void Curve::clear_settlement_days() {
  settlement_days_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::_internal_settlement_days() const {
  return settlement_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::settlement_days() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.settlement_days)
  return _internal_settlement_days();
}
inline void Curve::_internal_set_settlement_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlement_days_ = value;
}
inline void Curve::set_settlement_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_settlement_days(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.settlement_days)
}

// repeated int32 maturity_period_value = 10;
inline int Curve::_internal_maturity_period_value_size() const {
  return maturity_period_value_.size();
}
inline int Curve::maturity_period_value_size() const {
  return _internal_maturity_period_value_size();
}
inline void Curve::clear_maturity_period_value() {
  maturity_period_value_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::_internal_maturity_period_value(int index) const {
  return maturity_period_value_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::maturity_period_value(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.maturity_period_value)
  return _internal_maturity_period_value(index);
}
inline void Curve::set_maturity_period_value(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  maturity_period_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.maturity_period_value)
}
inline void Curve::_internal_add_maturity_period_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  maturity_period_value_.Add(value);
}
inline void Curve::add_maturity_period_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_maturity_period_value(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.Curve.maturity_period_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Curve::_internal_maturity_period_value() const {
  return maturity_period_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Curve::maturity_period_value() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.Curve.maturity_period_value)
  return _internal_maturity_period_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Curve::_internal_mutable_maturity_period_value() {
  return &maturity_period_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Curve::mutable_maturity_period_value() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.Curve.maturity_period_value)
  return _internal_mutable_maturity_period_value();
}

// repeated int32 maturity_period_type = 11;
inline int Curve::_internal_maturity_period_type_size() const {
  return maturity_period_type_.size();
}
inline int Curve::maturity_period_type_size() const {
  return _internal_maturity_period_type_size();
}
inline void Curve::clear_maturity_period_type() {
  maturity_period_type_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::_internal_maturity_period_type(int index) const {
  return maturity_period_type_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Curve::maturity_period_type(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.maturity_period_type)
  return _internal_maturity_period_type(index);
}
inline void Curve::set_maturity_period_type(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  maturity_period_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.maturity_period_type)
}
inline void Curve::_internal_add_maturity_period_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  maturity_period_type_.Add(value);
}
inline void Curve::add_maturity_period_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_maturity_period_type(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.Curve.maturity_period_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Curve::_internal_maturity_period_type() const {
  return maturity_period_type_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Curve::maturity_period_type() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.Curve.maturity_period_type)
  return _internal_maturity_period_type();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Curve::_internal_mutable_maturity_period_type() {
  return &maturity_period_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Curve::mutable_maturity_period_type() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.Curve.maturity_period_type)
  return _internal_mutable_maturity_period_type();
}

// repeated float rates = 12;
inline int Curve::_internal_rates_size() const {
  return rates_.size();
}
inline int Curve::rates_size() const {
  return _internal_rates_size();
}
inline void Curve::clear_rates() {
  rates_.Clear();
}
inline float Curve::_internal_rates(int index) const {
  return rates_.Get(index);
}
inline float Curve::rates(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.Curve.rates)
  return _internal_rates(index);
}
inline void Curve::set_rates(int index, float value) {
  rates_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.Curve.rates)
}
inline void Curve::_internal_add_rates(float value) {
  rates_.Add(value);
}
inline void Curve::add_rates(float value) {
  _internal_add_rates(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.Curve.rates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Curve::_internal_rates() const {
  return rates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Curve::rates() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.Curve.rates)
  return _internal_rates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Curve::_internal_mutable_rates() {
  return &rates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Curve::mutable_rates() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.Curve.rates)
  return _internal_mutable_rates();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace FlumaionQL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_curve_2eproto
