// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: JetToPython.proto

#include "../include/JetToPython.pb.h"
#include "../include/JetToPython.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace jet_to_python {

static const char* JetToPython_method_names[] = {
  "/jet_to_python.JetToPython/streamingCall",
};

std::unique_ptr< JetToPython::Stub> JetToPython::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< JetToPython::Stub> stub(new JetToPython::Stub(channel));
  return stub;
}

JetToPython::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_streamingCall_(JetToPython_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::jet_to_python::InputMessage, ::jet_to_python::OutputMessage>* JetToPython::Stub::streamingCallRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::jet_to_python::InputMessage, ::jet_to_python::OutputMessage>::Create(channel_.get(), rpcmethod_streamingCall_, context);
}

void JetToPython::Stub::experimental_async::streamingCall(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::jet_to_python::InputMessage,::jet_to_python::OutputMessage>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::jet_to_python::InputMessage,::jet_to_python::OutputMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_streamingCall_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::jet_to_python::InputMessage, ::jet_to_python::OutputMessage>* JetToPython::Stub::AsyncstreamingCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::jet_to_python::InputMessage, ::jet_to_python::OutputMessage>::Create(channel_.get(), cq, rpcmethod_streamingCall_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::jet_to_python::InputMessage, ::jet_to_python::OutputMessage>* JetToPython::Stub::PrepareAsyncstreamingCallRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::jet_to_python::InputMessage, ::jet_to_python::OutputMessage>::Create(channel_.get(), cq, rpcmethod_streamingCall_, context, false, nullptr);
}

JetToPython::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      JetToPython_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< JetToPython::Service, ::jet_to_python::InputMessage, ::jet_to_python::OutputMessage>(
          std::mem_fn(&JetToPython::Service::streamingCall), this)));
}

JetToPython::Service::~Service() {
}

::grpc::Status JetToPython::Service::streamingCall(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::jet_to_python::OutputMessage, ::jet_to_python::InputMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace jet_to_python

