<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.hazelcast.platform.demos.banking.cva</groupId>
		<artifactId>cva-root</artifactId>
		<version>5.2</version>
	</parent>

	<artifactId>cva-cpp</artifactId>

	<name>Hazelcast Platform - CVA - C++ Code</name>
	<description>Credit Value Adjustment - C++ Pricer</description>

	<properties>
		<my.docker.image.name>cpp</my.docker.image.name>
		<my.docker.jar.file>${project.artifactId}-${project.version}.jar</my.docker.jar.file>
		<main.basedir>${project.parent.parent.parent.basedir}</main.basedir>

		<tmp.docker.image1>hazelcast-platform-demos/${my.docker.image.prefix}-${my.docker.image.name}-tmp1</tmp.docker.image1>
		<tmp.docker.image2>hazelcast-platform-demos/${my.docker.image.prefix}-${my.docker.image.name}-tmp2</tmp.docker.image2>
		<tmp.docker.image3>hazelcast-platform-demos/${my.docker.image.prefix}-${my.docker.image.name}-tmp3</tmp.docker.image3>
		<final.docker.image>hazelcast-platform-demos/${my.docker.image.prefix}-${my.docker.image.name}</final.docker.image>
	</properties>

	<!-- Multi-step Dockerfile build -->
	<!-- "- - squash" is only supported on a Docker daemon with experimental 
		features enabled -->
	<build>
		<plugins>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<executions>
					<!-- No <id>, Anonymous execution goes first -->
					<execution>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
							<docker.verbose>true</docker.verbose>
						    <images>
     							<image>
     								<name>${tmp.docker.image1}</name>
						       		<build>
										<dockerFileDir>${project.basedir}/src/main/docker/Dockerfile1</dockerFileDir>
						       		</build>
     							</image>
						    </images>
						</configuration>
					</execution>
					<execution>
						<id>Dockerfile2</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
						    <images>
     							<image>
     								<name>${tmp.docker.image2}</name>
						       		<build>
										<dockerFileDir>${project.basedir}/src/main/docker/Dockerfile2</dockerFileDir>
						       		</build>
     							</image>
						    </images>
						</configuration>
					</execution>
					<execution>
						<id>Dockerfile3</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
						    <images>
     							<image>
     								<name>${tmp.docker.image3}</name>
						       		<build>
										<dockerFileDir>${project.basedir}/src/main/docker/Dockerfile3</dockerFileDir>
						       		</build>
     							</image>
						    </images>
						</configuration>
					</execution>
					<execution>
						<id>Dockerfile4</id>
						<phase>package</phase>
						<goals>
							<goal>build</goal>
						</goals>
						<configuration>
						    <images>
     							<image>
     								<name>${final.docker.image}</name>
						       		<build>
										<dockerFileDir>${project.basedir}</dockerFileDir>
						       		</build>
     							</image>
						    </images>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This step deletes the intermediate builds. It saves space. If you keep them, another
                             build recognises the intermediate builds can be re-used so starts from step 4, much faster
                          -->
                        <!--
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>docker</executable>
							<arguments>
								<argument>rmi</argument>
								<arguments>${tmp.docker.image1}</arguments>
								<arguments>${tmp.docker.image2}</arguments>
								<arguments>${tmp.docker.image3}</arguments>
							</arguments>
							<skip>${dockerfile.skip}</skip>
							<successCodes>0,1</successCodes>
						</configuration>
					</execution>
				</executions>t
			</plugin>
			-->
		</plugins>
	</build>
</project>
