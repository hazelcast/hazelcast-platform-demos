// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: JetToCpp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_JetToCpp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_JetToCpp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_JetToCpp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_JetToCpp_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_JetToCpp_2eproto;
namespace com_hazelcast_platform_demos_banking_cva {
class InputMessage;
struct InputMessageDefaultTypeInternal;
extern InputMessageDefaultTypeInternal _InputMessage_default_instance_;
class OutputMessage;
struct OutputMessageDefaultTypeInternal;
extern OutputMessageDefaultTypeInternal _OutputMessage_default_instance_;
}  // namespace com_hazelcast_platform_demos_banking_cva
PROTOBUF_NAMESPACE_OPEN
template<> ::com_hazelcast_platform_demos_banking_cva::InputMessage* Arena::CreateMaybeMessage<::com_hazelcast_platform_demos_banking_cva::InputMessage>(Arena*);
template<> ::com_hazelcast_platform_demos_banking_cva::OutputMessage* Arena::CreateMaybeMessage<::com_hazelcast_platform_demos_banking_cva::OutputMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com_hazelcast_platform_demos_banking_cva {

// ===================================================================

class InputMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com_hazelcast_platform_demos_banking_cva.InputMessage) */ {
 public:
  inline InputMessage() : InputMessage(nullptr) {}
  ~InputMessage() override;
  explicit PROTOBUF_CONSTEXPR InputMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputMessage(const InputMessage& from);
  InputMessage(InputMessage&& from) noexcept
    : InputMessage() {
    *this = ::std::move(from);
  }

  inline InputMessage& operator=(const InputMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputMessage& operator=(InputMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputMessage* internal_default_instance() {
    return reinterpret_cast<const InputMessage*>(
               &_InputMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputMessage& a, InputMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InputMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputMessage& from) {
    InputMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com_hazelcast_platform_demos_banking_cva.InputMessage";
  }
  protected:
  explicit InputMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputValueFieldNumber = 1,
  };
  // repeated string inputValue = 1;
  int inputvalue_size() const;
  private:
  int _internal_inputvalue_size() const;
  public:
  void clear_inputvalue();
  const std::string& inputvalue(int index) const;
  std::string* mutable_inputvalue(int index);
  void set_inputvalue(int index, const std::string& value);
  void set_inputvalue(int index, std::string&& value);
  void set_inputvalue(int index, const char* value);
  void set_inputvalue(int index, const char* value, size_t size);
  std::string* add_inputvalue();
  void add_inputvalue(const std::string& value);
  void add_inputvalue(std::string&& value);
  void add_inputvalue(const char* value);
  void add_inputvalue(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& inputvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_inputvalue();
  private:
  const std::string& _internal_inputvalue(int index) const;
  std::string* _internal_add_inputvalue();
  public:

  // @@protoc_insertion_point(class_scope:com_hazelcast_platform_demos_banking_cva.InputMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> inputvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_JetToCpp_2eproto;
};
// -------------------------------------------------------------------

class OutputMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com_hazelcast_platform_demos_banking_cva.OutputMessage) */ {
 public:
  inline OutputMessage() : OutputMessage(nullptr) {}
  ~OutputMessage() override;
  explicit PROTOBUF_CONSTEXPR OutputMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OutputMessage(const OutputMessage& from);
  OutputMessage(OutputMessage&& from) noexcept
    : OutputMessage() {
    *this = ::std::move(from);
  }

  inline OutputMessage& operator=(const OutputMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputMessage& operator=(OutputMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OutputMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OutputMessage* internal_default_instance() {
    return reinterpret_cast<const OutputMessage*>(
               &_OutputMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OutputMessage& a, OutputMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OutputMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OutputMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OutputMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OutputMessage& from) {
    OutputMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com_hazelcast_platform_demos_banking_cva.OutputMessage";
  }
  protected:
  explicit OutputMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputValueFieldNumber = 1,
  };
  // repeated string outputValue = 1;
  int outputvalue_size() const;
  private:
  int _internal_outputvalue_size() const;
  public:
  void clear_outputvalue();
  const std::string& outputvalue(int index) const;
  std::string* mutable_outputvalue(int index);
  void set_outputvalue(int index, const std::string& value);
  void set_outputvalue(int index, std::string&& value);
  void set_outputvalue(int index, const char* value);
  void set_outputvalue(int index, const char* value, size_t size);
  std::string* add_outputvalue();
  void add_outputvalue(const std::string& value);
  void add_outputvalue(std::string&& value);
  void add_outputvalue(const char* value);
  void add_outputvalue(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& outputvalue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_outputvalue();
  private:
  const std::string& _internal_outputvalue(int index) const;
  std::string* _internal_add_outputvalue();
  public:

  // @@protoc_insertion_point(class_scope:com_hazelcast_platform_demos_banking_cva.OutputMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> outputvalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_JetToCpp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputMessage

// repeated string inputValue = 1;
inline int InputMessage::_internal_inputvalue_size() const {
  return _impl_.inputvalue_.size();
}
inline int InputMessage::inputvalue_size() const {
  return _internal_inputvalue_size();
}
inline void InputMessage::clear_inputvalue() {
  _impl_.inputvalue_.Clear();
}
inline std::string* InputMessage::add_inputvalue() {
  std::string* _s = _internal_add_inputvalue();
  // @@protoc_insertion_point(field_add_mutable:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
  return _s;
}
inline const std::string& InputMessage::_internal_inputvalue(int index) const {
  return _impl_.inputvalue_.Get(index);
}
inline const std::string& InputMessage::inputvalue(int index) const {
  // @@protoc_insertion_point(field_get:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
  return _internal_inputvalue(index);
}
inline std::string* InputMessage::mutable_inputvalue(int index) {
  // @@protoc_insertion_point(field_mutable:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
  return _impl_.inputvalue_.Mutable(index);
}
inline void InputMessage::set_inputvalue(int index, const std::string& value) {
  _impl_.inputvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
}
inline void InputMessage::set_inputvalue(int index, std::string&& value) {
  _impl_.inputvalue_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
}
inline void InputMessage::set_inputvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inputvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
}
inline void InputMessage::set_inputvalue(int index, const char* value, size_t size) {
  _impl_.inputvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
}
inline std::string* InputMessage::_internal_add_inputvalue() {
  return _impl_.inputvalue_.Add();
}
inline void InputMessage::add_inputvalue(const std::string& value) {
  _impl_.inputvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
}
inline void InputMessage::add_inputvalue(std::string&& value) {
  _impl_.inputvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
}
inline void InputMessage::add_inputvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.inputvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
}
inline void InputMessage::add_inputvalue(const char* value, size_t size) {
  _impl_.inputvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InputMessage::inputvalue() const {
  // @@protoc_insertion_point(field_list:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
  return _impl_.inputvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InputMessage::mutable_inputvalue() {
  // @@protoc_insertion_point(field_mutable_list:com_hazelcast_platform_demos_banking_cva.InputMessage.inputValue)
  return &_impl_.inputvalue_;
}

// -------------------------------------------------------------------

// OutputMessage

// repeated string outputValue = 1;
inline int OutputMessage::_internal_outputvalue_size() const {
  return _impl_.outputvalue_.size();
}
inline int OutputMessage::outputvalue_size() const {
  return _internal_outputvalue_size();
}
inline void OutputMessage::clear_outputvalue() {
  _impl_.outputvalue_.Clear();
}
inline std::string* OutputMessage::add_outputvalue() {
  std::string* _s = _internal_add_outputvalue();
  // @@protoc_insertion_point(field_add_mutable:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
  return _s;
}
inline const std::string& OutputMessage::_internal_outputvalue(int index) const {
  return _impl_.outputvalue_.Get(index);
}
inline const std::string& OutputMessage::outputvalue(int index) const {
  // @@protoc_insertion_point(field_get:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
  return _internal_outputvalue(index);
}
inline std::string* OutputMessage::mutable_outputvalue(int index) {
  // @@protoc_insertion_point(field_mutable:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
  return _impl_.outputvalue_.Mutable(index);
}
inline void OutputMessage::set_outputvalue(int index, const std::string& value) {
  _impl_.outputvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
}
inline void OutputMessage::set_outputvalue(int index, std::string&& value) {
  _impl_.outputvalue_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
}
inline void OutputMessage::set_outputvalue(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.outputvalue_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
}
inline void OutputMessage::set_outputvalue(int index, const char* value, size_t size) {
  _impl_.outputvalue_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
}
inline std::string* OutputMessage::_internal_add_outputvalue() {
  return _impl_.outputvalue_.Add();
}
inline void OutputMessage::add_outputvalue(const std::string& value) {
  _impl_.outputvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
}
inline void OutputMessage::add_outputvalue(std::string&& value) {
  _impl_.outputvalue_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
}
inline void OutputMessage::add_outputvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.outputvalue_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
}
inline void OutputMessage::add_outputvalue(const char* value, size_t size) {
  _impl_.outputvalue_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OutputMessage::outputvalue() const {
  // @@protoc_insertion_point(field_list:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
  return _impl_.outputvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OutputMessage::mutable_outputvalue() {
  // @@protoc_insertion_point(field_mutable_list:com_hazelcast_platform_demos_banking_cva.OutputMessage.outputValue)
  return &_impl_.outputvalue_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace com_hazelcast_platform_demos_banking_cva

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_JetToCpp_2eproto
