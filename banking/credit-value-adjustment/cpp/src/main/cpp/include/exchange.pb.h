// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_exchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_exchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_exchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_exchange_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_exchange_2eproto;
namespace FlumaionQL {
class DataExchange;
struct DataExchangeDefaultTypeInternal;
extern DataExchangeDefaultTypeInternal _DataExchange_default_instance_;
}  // namespace FlumaionQL
PROTOBUF_NAMESPACE_OPEN
template<> ::FlumaionQL::DataExchange* Arena::CreateMaybeMessage<::FlumaionQL::DataExchange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FlumaionQL {

// ===================================================================

class DataExchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FlumaionQL.DataExchange) */ {
 public:
  inline DataExchange() : DataExchange(nullptr) {}
  ~DataExchange() override;
  explicit PROTOBUF_CONSTEXPR DataExchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataExchange(const DataExchange& from);
  DataExchange(DataExchange&& from) noexcept
    : DataExchange() {
    *this = ::std::move(from);
  }

  inline DataExchange& operator=(const DataExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataExchange& operator=(DataExchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataExchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataExchange* internal_default_instance() {
    return reinterpret_cast<const DataExchange*>(
               &_DataExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataExchange& a, DataExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(DataExchange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataExchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataExchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataExchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DataExchange& from) {
    DataExchange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataExchange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FlumaionQL.DataExchange";
  }
  protected:
  explicit DataExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurvefileFieldNumber = 1,
    kFixingfileFieldNumber = 2,
    kTradefileFieldNumber = 3,
    kEvaldateFieldNumber = 4,
    kResultsfileFieldNumber = 5,
    kScenarioidFieldNumber = 6,
    kTradeidFieldNumber = 7,
  };
  // string curvefile = 1;
  void clear_curvefile();
  const std::string& curvefile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_curvefile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_curvefile();
  PROTOBUF_NODISCARD std::string* release_curvefile();
  void set_allocated_curvefile(std::string* curvefile);
  private:
  const std::string& _internal_curvefile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_curvefile(const std::string& value);
  std::string* _internal_mutable_curvefile();
  public:

  // string fixingfile = 2;
  void clear_fixingfile();
  const std::string& fixingfile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fixingfile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fixingfile();
  PROTOBUF_NODISCARD std::string* release_fixingfile();
  void set_allocated_fixingfile(std::string* fixingfile);
  private:
  const std::string& _internal_fixingfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fixingfile(const std::string& value);
  std::string* _internal_mutable_fixingfile();
  public:

  // string tradefile = 3;
  void clear_tradefile();
  const std::string& tradefile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradefile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradefile();
  PROTOBUF_NODISCARD std::string* release_tradefile();
  void set_allocated_tradefile(std::string* tradefile);
  private:
  const std::string& _internal_tradefile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradefile(const std::string& value);
  std::string* _internal_mutable_tradefile();
  public:

  // string evaldate = 4;
  void clear_evaldate();
  const std::string& evaldate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_evaldate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_evaldate();
  PROTOBUF_NODISCARD std::string* release_evaldate();
  void set_allocated_evaldate(std::string* evaldate);
  private:
  const std::string& _internal_evaldate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_evaldate(const std::string& value);
  std::string* _internal_mutable_evaldate();
  public:

  // string resultsfile = 5;
  void clear_resultsfile();
  const std::string& resultsfile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resultsfile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resultsfile();
  PROTOBUF_NODISCARD std::string* release_resultsfile();
  void set_allocated_resultsfile(std::string* resultsfile);
  private:
  const std::string& _internal_resultsfile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resultsfile(const std::string& value);
  std::string* _internal_mutable_resultsfile();
  public:

  // string scenarioid = 6;
  void clear_scenarioid();
  const std::string& scenarioid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenarioid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenarioid();
  PROTOBUF_NODISCARD std::string* release_scenarioid();
  void set_allocated_scenarioid(std::string* scenarioid);
  private:
  const std::string& _internal_scenarioid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenarioid(const std::string& value);
  std::string* _internal_mutable_scenarioid();
  public:

  // string tradeid = 7;
  void clear_tradeid();
  const std::string& tradeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradeid();
  PROTOBUF_NODISCARD std::string* release_tradeid();
  void set_allocated_tradeid(std::string* tradeid);
  private:
  const std::string& _internal_tradeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradeid(const std::string& value);
  std::string* _internal_mutable_tradeid();
  public:

  // @@protoc_insertion_point(class_scope:FlumaionQL.DataExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr curvefile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixingfile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradefile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evaldate_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resultsfile_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenarioid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradeid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_exchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataExchange

// string curvefile = 1;
inline void DataExchange::clear_curvefile() {
  _impl_.curvefile_.ClearToEmpty();
}
inline const std::string& DataExchange::curvefile() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.DataExchange.curvefile)
  return _internal_curvefile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_curvefile(ArgT0&& arg0, ArgT... args) {
 
 _impl_.curvefile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.DataExchange.curvefile)
}
inline std::string* DataExchange::mutable_curvefile() {
  std::string* _s = _internal_mutable_curvefile();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.DataExchange.curvefile)
  return _s;
}
inline const std::string& DataExchange::_internal_curvefile() const {
  return _impl_.curvefile_.Get();
}
inline void DataExchange::_internal_set_curvefile(const std::string& value) {
  
  _impl_.curvefile_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_curvefile() {
  
  return _impl_.curvefile_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_curvefile() {
  // @@protoc_insertion_point(field_release:FlumaionQL.DataExchange.curvefile)
  return _impl_.curvefile_.Release();
}
inline void DataExchange::set_allocated_curvefile(std::string* curvefile) {
  if (curvefile != nullptr) {
    
  } else {
    
  }
  _impl_.curvefile_.SetAllocated(curvefile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.curvefile_.IsDefault()) {
    _impl_.curvefile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.DataExchange.curvefile)
}

// string fixingfile = 2;
inline void DataExchange::clear_fixingfile() {
  _impl_.fixingfile_.ClearToEmpty();
}
inline const std::string& DataExchange::fixingfile() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.DataExchange.fixingfile)
  return _internal_fixingfile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_fixingfile(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fixingfile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.DataExchange.fixingfile)
}
inline std::string* DataExchange::mutable_fixingfile() {
  std::string* _s = _internal_mutable_fixingfile();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.DataExchange.fixingfile)
  return _s;
}
inline const std::string& DataExchange::_internal_fixingfile() const {
  return _impl_.fixingfile_.Get();
}
inline void DataExchange::_internal_set_fixingfile(const std::string& value) {
  
  _impl_.fixingfile_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_fixingfile() {
  
  return _impl_.fixingfile_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_fixingfile() {
  // @@protoc_insertion_point(field_release:FlumaionQL.DataExchange.fixingfile)
  return _impl_.fixingfile_.Release();
}
inline void DataExchange::set_allocated_fixingfile(std::string* fixingfile) {
  if (fixingfile != nullptr) {
    
  } else {
    
  }
  _impl_.fixingfile_.SetAllocated(fixingfile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fixingfile_.IsDefault()) {
    _impl_.fixingfile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.DataExchange.fixingfile)
}

// string tradefile = 3;
inline void DataExchange::clear_tradefile() {
  _impl_.tradefile_.ClearToEmpty();
}
inline const std::string& DataExchange::tradefile() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.DataExchange.tradefile)
  return _internal_tradefile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_tradefile(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradefile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.DataExchange.tradefile)
}
inline std::string* DataExchange::mutable_tradefile() {
  std::string* _s = _internal_mutable_tradefile();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.DataExchange.tradefile)
  return _s;
}
inline const std::string& DataExchange::_internal_tradefile() const {
  return _impl_.tradefile_.Get();
}
inline void DataExchange::_internal_set_tradefile(const std::string& value) {
  
  _impl_.tradefile_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_tradefile() {
  
  return _impl_.tradefile_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_tradefile() {
  // @@protoc_insertion_point(field_release:FlumaionQL.DataExchange.tradefile)
  return _impl_.tradefile_.Release();
}
inline void DataExchange::set_allocated_tradefile(std::string* tradefile) {
  if (tradefile != nullptr) {
    
  } else {
    
  }
  _impl_.tradefile_.SetAllocated(tradefile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradefile_.IsDefault()) {
    _impl_.tradefile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.DataExchange.tradefile)
}

// string evaldate = 4;
inline void DataExchange::clear_evaldate() {
  _impl_.evaldate_.ClearToEmpty();
}
inline const std::string& DataExchange::evaldate() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.DataExchange.evaldate)
  return _internal_evaldate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_evaldate(ArgT0&& arg0, ArgT... args) {
 
 _impl_.evaldate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.DataExchange.evaldate)
}
inline std::string* DataExchange::mutable_evaldate() {
  std::string* _s = _internal_mutable_evaldate();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.DataExchange.evaldate)
  return _s;
}
inline const std::string& DataExchange::_internal_evaldate() const {
  return _impl_.evaldate_.Get();
}
inline void DataExchange::_internal_set_evaldate(const std::string& value) {
  
  _impl_.evaldate_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_evaldate() {
  
  return _impl_.evaldate_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_evaldate() {
  // @@protoc_insertion_point(field_release:FlumaionQL.DataExchange.evaldate)
  return _impl_.evaldate_.Release();
}
inline void DataExchange::set_allocated_evaldate(std::string* evaldate) {
  if (evaldate != nullptr) {
    
  } else {
    
  }
  _impl_.evaldate_.SetAllocated(evaldate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.evaldate_.IsDefault()) {
    _impl_.evaldate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.DataExchange.evaldate)
}

// string resultsfile = 5;
inline void DataExchange::clear_resultsfile() {
  _impl_.resultsfile_.ClearToEmpty();
}
inline const std::string& DataExchange::resultsfile() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.DataExchange.resultsfile)
  return _internal_resultsfile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_resultsfile(ArgT0&& arg0, ArgT... args) {
 
 _impl_.resultsfile_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.DataExchange.resultsfile)
}
inline std::string* DataExchange::mutable_resultsfile() {
  std::string* _s = _internal_mutable_resultsfile();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.DataExchange.resultsfile)
  return _s;
}
inline const std::string& DataExchange::_internal_resultsfile() const {
  return _impl_.resultsfile_.Get();
}
inline void DataExchange::_internal_set_resultsfile(const std::string& value) {
  
  _impl_.resultsfile_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_resultsfile() {
  
  return _impl_.resultsfile_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_resultsfile() {
  // @@protoc_insertion_point(field_release:FlumaionQL.DataExchange.resultsfile)
  return _impl_.resultsfile_.Release();
}
inline void DataExchange::set_allocated_resultsfile(std::string* resultsfile) {
  if (resultsfile != nullptr) {
    
  } else {
    
  }
  _impl_.resultsfile_.SetAllocated(resultsfile, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resultsfile_.IsDefault()) {
    _impl_.resultsfile_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.DataExchange.resultsfile)
}

// string scenarioid = 6;
inline void DataExchange::clear_scenarioid() {
  _impl_.scenarioid_.ClearToEmpty();
}
inline const std::string& DataExchange::scenarioid() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.DataExchange.scenarioid)
  return _internal_scenarioid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_scenarioid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.scenarioid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.DataExchange.scenarioid)
}
inline std::string* DataExchange::mutable_scenarioid() {
  std::string* _s = _internal_mutable_scenarioid();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.DataExchange.scenarioid)
  return _s;
}
inline const std::string& DataExchange::_internal_scenarioid() const {
  return _impl_.scenarioid_.Get();
}
inline void DataExchange::_internal_set_scenarioid(const std::string& value) {
  
  _impl_.scenarioid_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_scenarioid() {
  
  return _impl_.scenarioid_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_scenarioid() {
  // @@protoc_insertion_point(field_release:FlumaionQL.DataExchange.scenarioid)
  return _impl_.scenarioid_.Release();
}
inline void DataExchange::set_allocated_scenarioid(std::string* scenarioid) {
  if (scenarioid != nullptr) {
    
  } else {
    
  }
  _impl_.scenarioid_.SetAllocated(scenarioid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scenarioid_.IsDefault()) {
    _impl_.scenarioid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.DataExchange.scenarioid)
}

// string tradeid = 7;
inline void DataExchange::clear_tradeid() {
  _impl_.tradeid_.ClearToEmpty();
}
inline const std::string& DataExchange::tradeid() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.DataExchange.tradeid)
  return _internal_tradeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataExchange::set_tradeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.DataExchange.tradeid)
}
inline std::string* DataExchange::mutable_tradeid() {
  std::string* _s = _internal_mutable_tradeid();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.DataExchange.tradeid)
  return _s;
}
inline const std::string& DataExchange::_internal_tradeid() const {
  return _impl_.tradeid_.Get();
}
inline void DataExchange::_internal_set_tradeid(const std::string& value) {
  
  _impl_.tradeid_.Set(value, GetArenaForAllocation());
}
inline std::string* DataExchange::_internal_mutable_tradeid() {
  
  return _impl_.tradeid_.Mutable(GetArenaForAllocation());
}
inline std::string* DataExchange::release_tradeid() {
  // @@protoc_insertion_point(field_release:FlumaionQL.DataExchange.tradeid)
  return _impl_.tradeid_.Release();
}
inline void DataExchange::set_allocated_tradeid(std::string* tradeid) {
  if (tradeid != nullptr) {
    
  } else {
    
  }
  _impl_.tradeid_.SetAllocated(tradeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradeid_.IsDefault()) {
    _impl_.tradeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.DataExchange.tradeid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace FlumaionQL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_exchange_2eproto
