// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mtms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mtms_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mtms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mtms_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mtms_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mtms_2eproto;
namespace FlumaionQL {
class MTM;
struct MTMDefaultTypeInternal;
extern MTMDefaultTypeInternal _MTM_default_instance_;
}  // namespace FlumaionQL
PROTOBUF_NAMESPACE_OPEN
template<> ::FlumaionQL::MTM* Arena::CreateMaybeMessage<::FlumaionQL::MTM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FlumaionQL {

// ===================================================================

class MTM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FlumaionQL.MTM) */ {
 public:
  inline MTM() : MTM(nullptr) {}
  ~MTM() override;
  explicit PROTOBUF_CONSTEXPR MTM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MTM(const MTM& from);
  MTM(MTM&& from) noexcept
    : MTM() {
    *this = ::std::move(from);
  }

  inline MTM& operator=(const MTM& from) {
    CopyFrom(from);
    return *this;
  }
  inline MTM& operator=(MTM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MTM& default_instance() {
    return *internal_default_instance();
  }
  static inline const MTM* internal_default_instance() {
    return reinterpret_cast<const MTM*>(
               &_MTM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MTM& a, MTM& b) {
    a.Swap(&b);
  }
  inline void Swap(MTM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MTM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MTM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MTM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MTM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MTM& from) {
    MTM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MTM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FlumaionQL.MTM";
  }
  protected:
  explicit MTM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixlegdatesFieldNumber = 3,
    kFixlegamountFieldNumber = 4,
    kFltlegdatesFieldNumber = 5,
    kFltlegamountFieldNumber = 6,
    kDiscountvaluesFieldNumber = 7,
    kLegfractionsFieldNumber = 8,
    kTradeidFieldNumber = 1,
    kCurvenameFieldNumber = 2,
    kErrorFieldNumber = 10,
    kComputetimemicrosFieldNumber = 11,
    kHaserroredFieldNumber = 9,
  };
  // repeated int64 fixlegdates = 3;
  int fixlegdates_size() const;
  private:
  int _internal_fixlegdates_size() const;
  public:
  void clear_fixlegdates();
  private:
  int64_t _internal_fixlegdates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_fixlegdates() const;
  void _internal_add_fixlegdates(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_fixlegdates();
  public:
  int64_t fixlegdates(int index) const;
  void set_fixlegdates(int index, int64_t value);
  void add_fixlegdates(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      fixlegdates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_fixlegdates();

  // repeated float fixlegamount = 4;
  int fixlegamount_size() const;
  private:
  int _internal_fixlegamount_size() const;
  public:
  void clear_fixlegamount();
  private:
  float _internal_fixlegamount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fixlegamount() const;
  void _internal_add_fixlegamount(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fixlegamount();
  public:
  float fixlegamount(int index) const;
  void set_fixlegamount(int index, float value);
  void add_fixlegamount(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fixlegamount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fixlegamount();

  // repeated int64 fltlegdates = 5;
  int fltlegdates_size() const;
  private:
  int _internal_fltlegdates_size() const;
  public:
  void clear_fltlegdates();
  private:
  int64_t _internal_fltlegdates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_fltlegdates() const;
  void _internal_add_fltlegdates(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_fltlegdates();
  public:
  int64_t fltlegdates(int index) const;
  void set_fltlegdates(int index, int64_t value);
  void add_fltlegdates(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      fltlegdates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_fltlegdates();

  // repeated float fltlegamount = 6;
  int fltlegamount_size() const;
  private:
  int _internal_fltlegamount_size() const;
  public:
  void clear_fltlegamount();
  private:
  float _internal_fltlegamount(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_fltlegamount() const;
  void _internal_add_fltlegamount(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_fltlegamount();
  public:
  float fltlegamount(int index) const;
  void set_fltlegamount(int index, float value);
  void add_fltlegamount(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      fltlegamount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_fltlegamount();

  // repeated float discountvalues = 7;
  int discountvalues_size() const;
  private:
  int _internal_discountvalues_size() const;
  public:
  void clear_discountvalues();
  private:
  float _internal_discountvalues(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_discountvalues() const;
  void _internal_add_discountvalues(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_discountvalues();
  public:
  float discountvalues(int index) const;
  void set_discountvalues(int index, float value);
  void add_discountvalues(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      discountvalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_discountvalues();

  // repeated float legfractions = 8;
  int legfractions_size() const;
  private:
  int _internal_legfractions_size() const;
  public:
  void clear_legfractions();
  private:
  float _internal_legfractions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_legfractions() const;
  void _internal_add_legfractions(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_legfractions();
  public:
  float legfractions(int index) const;
  void set_legfractions(int index, float value);
  void add_legfractions(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      legfractions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_legfractions();

  // string tradeid = 1;
  void clear_tradeid();
  const std::string& tradeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradeid();
  PROTOBUF_NODISCARD std::string* release_tradeid();
  void set_allocated_tradeid(std::string* tradeid);
  private:
  const std::string& _internal_tradeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradeid(const std::string& value);
  std::string* _internal_mutable_tradeid();
  public:

  // string curvename = 2;
  void clear_curvename();
  const std::string& curvename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_curvename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_curvename();
  PROTOBUF_NODISCARD std::string* release_curvename();
  void set_allocated_curvename(std::string* curvename);
  private:
  const std::string& _internal_curvename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_curvename(const std::string& value);
  std::string* _internal_mutable_curvename();
  public:

  // string error = 10;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int64 computetimemicros = 11;
  void clear_computetimemicros();
  int64_t computetimemicros() const;
  void set_computetimemicros(int64_t value);
  private:
  int64_t _internal_computetimemicros() const;
  void _internal_set_computetimemicros(int64_t value);
  public:

  // bool haserrored = 9;
  void clear_haserrored();
  bool haserrored() const;
  void set_haserrored(bool value);
  private:
  bool _internal_haserrored() const;
  void _internal_set_haserrored(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FlumaionQL.MTM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > fixlegdates_;
    mutable std::atomic<int> _fixlegdates_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fixlegamount_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > fltlegdates_;
    mutable std::atomic<int> _fltlegdates_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > fltlegamount_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > discountvalues_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > legfractions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr curvename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int64_t computetimemicros_;
    bool haserrored_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mtms_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MTM

// string tradeid = 1;
inline void MTM::clear_tradeid() {
  _impl_.tradeid_.ClearToEmpty();
}
inline const std::string& MTM::tradeid() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.tradeid)
  return _internal_tradeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MTM::set_tradeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.tradeid)
}
inline std::string* MTM::mutable_tradeid() {
  std::string* _s = _internal_mutable_tradeid();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.MTM.tradeid)
  return _s;
}
inline const std::string& MTM::_internal_tradeid() const {
  return _impl_.tradeid_.Get();
}
inline void MTM::_internal_set_tradeid(const std::string& value) {
  
  _impl_.tradeid_.Set(value, GetArenaForAllocation());
}
inline std::string* MTM::_internal_mutable_tradeid() {
  
  return _impl_.tradeid_.Mutable(GetArenaForAllocation());
}
inline std::string* MTM::release_tradeid() {
  // @@protoc_insertion_point(field_release:FlumaionQL.MTM.tradeid)
  return _impl_.tradeid_.Release();
}
inline void MTM::set_allocated_tradeid(std::string* tradeid) {
  if (tradeid != nullptr) {
    
  } else {
    
  }
  _impl_.tradeid_.SetAllocated(tradeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradeid_.IsDefault()) {
    _impl_.tradeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.MTM.tradeid)
}

// string curvename = 2;
inline void MTM::clear_curvename() {
  _impl_.curvename_.ClearToEmpty();
}
inline const std::string& MTM::curvename() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.curvename)
  return _internal_curvename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MTM::set_curvename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.curvename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.curvename)
}
inline std::string* MTM::mutable_curvename() {
  std::string* _s = _internal_mutable_curvename();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.MTM.curvename)
  return _s;
}
inline const std::string& MTM::_internal_curvename() const {
  return _impl_.curvename_.Get();
}
inline void MTM::_internal_set_curvename(const std::string& value) {
  
  _impl_.curvename_.Set(value, GetArenaForAllocation());
}
inline std::string* MTM::_internal_mutable_curvename() {
  
  return _impl_.curvename_.Mutable(GetArenaForAllocation());
}
inline std::string* MTM::release_curvename() {
  // @@protoc_insertion_point(field_release:FlumaionQL.MTM.curvename)
  return _impl_.curvename_.Release();
}
inline void MTM::set_allocated_curvename(std::string* curvename) {
  if (curvename != nullptr) {
    
  } else {
    
  }
  _impl_.curvename_.SetAllocated(curvename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.curvename_.IsDefault()) {
    _impl_.curvename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.MTM.curvename)
}

// repeated int64 fixlegdates = 3;
inline int MTM::_internal_fixlegdates_size() const {
  return _impl_.fixlegdates_.size();
}
inline int MTM::fixlegdates_size() const {
  return _internal_fixlegdates_size();
}
inline void MTM::clear_fixlegdates() {
  _impl_.fixlegdates_.Clear();
}
inline int64_t MTM::_internal_fixlegdates(int index) const {
  return _impl_.fixlegdates_.Get(index);
}
inline int64_t MTM::fixlegdates(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.fixlegdates)
  return _internal_fixlegdates(index);
}
inline void MTM::set_fixlegdates(int index, int64_t value) {
  _impl_.fixlegdates_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.fixlegdates)
}
inline void MTM::_internal_add_fixlegdates(int64_t value) {
  _impl_.fixlegdates_.Add(value);
}
inline void MTM::add_fixlegdates(int64_t value) {
  _internal_add_fixlegdates(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.MTM.fixlegdates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MTM::_internal_fixlegdates() const {
  return _impl_.fixlegdates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MTM::fixlegdates() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.MTM.fixlegdates)
  return _internal_fixlegdates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MTM::_internal_mutable_fixlegdates() {
  return &_impl_.fixlegdates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MTM::mutable_fixlegdates() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.MTM.fixlegdates)
  return _internal_mutable_fixlegdates();
}

// repeated float fixlegamount = 4;
inline int MTM::_internal_fixlegamount_size() const {
  return _impl_.fixlegamount_.size();
}
inline int MTM::fixlegamount_size() const {
  return _internal_fixlegamount_size();
}
inline void MTM::clear_fixlegamount() {
  _impl_.fixlegamount_.Clear();
}
inline float MTM::_internal_fixlegamount(int index) const {
  return _impl_.fixlegamount_.Get(index);
}
inline float MTM::fixlegamount(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.fixlegamount)
  return _internal_fixlegamount(index);
}
inline void MTM::set_fixlegamount(int index, float value) {
  _impl_.fixlegamount_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.fixlegamount)
}
inline void MTM::_internal_add_fixlegamount(float value) {
  _impl_.fixlegamount_.Add(value);
}
inline void MTM::add_fixlegamount(float value) {
  _internal_add_fixlegamount(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.MTM.fixlegamount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MTM::_internal_fixlegamount() const {
  return _impl_.fixlegamount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MTM::fixlegamount() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.MTM.fixlegamount)
  return _internal_fixlegamount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MTM::_internal_mutable_fixlegamount() {
  return &_impl_.fixlegamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MTM::mutable_fixlegamount() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.MTM.fixlegamount)
  return _internal_mutable_fixlegamount();
}

// repeated int64 fltlegdates = 5;
inline int MTM::_internal_fltlegdates_size() const {
  return _impl_.fltlegdates_.size();
}
inline int MTM::fltlegdates_size() const {
  return _internal_fltlegdates_size();
}
inline void MTM::clear_fltlegdates() {
  _impl_.fltlegdates_.Clear();
}
inline int64_t MTM::_internal_fltlegdates(int index) const {
  return _impl_.fltlegdates_.Get(index);
}
inline int64_t MTM::fltlegdates(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.fltlegdates)
  return _internal_fltlegdates(index);
}
inline void MTM::set_fltlegdates(int index, int64_t value) {
  _impl_.fltlegdates_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.fltlegdates)
}
inline void MTM::_internal_add_fltlegdates(int64_t value) {
  _impl_.fltlegdates_.Add(value);
}
inline void MTM::add_fltlegdates(int64_t value) {
  _internal_add_fltlegdates(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.MTM.fltlegdates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MTM::_internal_fltlegdates() const {
  return _impl_.fltlegdates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
MTM::fltlegdates() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.MTM.fltlegdates)
  return _internal_fltlegdates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MTM::_internal_mutable_fltlegdates() {
  return &_impl_.fltlegdates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
MTM::mutable_fltlegdates() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.MTM.fltlegdates)
  return _internal_mutable_fltlegdates();
}

// repeated float fltlegamount = 6;
inline int MTM::_internal_fltlegamount_size() const {
  return _impl_.fltlegamount_.size();
}
inline int MTM::fltlegamount_size() const {
  return _internal_fltlegamount_size();
}
inline void MTM::clear_fltlegamount() {
  _impl_.fltlegamount_.Clear();
}
inline float MTM::_internal_fltlegamount(int index) const {
  return _impl_.fltlegamount_.Get(index);
}
inline float MTM::fltlegamount(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.fltlegamount)
  return _internal_fltlegamount(index);
}
inline void MTM::set_fltlegamount(int index, float value) {
  _impl_.fltlegamount_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.fltlegamount)
}
inline void MTM::_internal_add_fltlegamount(float value) {
  _impl_.fltlegamount_.Add(value);
}
inline void MTM::add_fltlegamount(float value) {
  _internal_add_fltlegamount(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.MTM.fltlegamount)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MTM::_internal_fltlegamount() const {
  return _impl_.fltlegamount_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MTM::fltlegamount() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.MTM.fltlegamount)
  return _internal_fltlegamount();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MTM::_internal_mutable_fltlegamount() {
  return &_impl_.fltlegamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MTM::mutable_fltlegamount() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.MTM.fltlegamount)
  return _internal_mutable_fltlegamount();
}

// repeated float discountvalues = 7;
inline int MTM::_internal_discountvalues_size() const {
  return _impl_.discountvalues_.size();
}
inline int MTM::discountvalues_size() const {
  return _internal_discountvalues_size();
}
inline void MTM::clear_discountvalues() {
  _impl_.discountvalues_.Clear();
}
inline float MTM::_internal_discountvalues(int index) const {
  return _impl_.discountvalues_.Get(index);
}
inline float MTM::discountvalues(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.discountvalues)
  return _internal_discountvalues(index);
}
inline void MTM::set_discountvalues(int index, float value) {
  _impl_.discountvalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.discountvalues)
}
inline void MTM::_internal_add_discountvalues(float value) {
  _impl_.discountvalues_.Add(value);
}
inline void MTM::add_discountvalues(float value) {
  _internal_add_discountvalues(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.MTM.discountvalues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MTM::_internal_discountvalues() const {
  return _impl_.discountvalues_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MTM::discountvalues() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.MTM.discountvalues)
  return _internal_discountvalues();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MTM::_internal_mutable_discountvalues() {
  return &_impl_.discountvalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MTM::mutable_discountvalues() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.MTM.discountvalues)
  return _internal_mutable_discountvalues();
}

// repeated float legfractions = 8;
inline int MTM::_internal_legfractions_size() const {
  return _impl_.legfractions_.size();
}
inline int MTM::legfractions_size() const {
  return _internal_legfractions_size();
}
inline void MTM::clear_legfractions() {
  _impl_.legfractions_.Clear();
}
inline float MTM::_internal_legfractions(int index) const {
  return _impl_.legfractions_.Get(index);
}
inline float MTM::legfractions(int index) const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.legfractions)
  return _internal_legfractions(index);
}
inline void MTM::set_legfractions(int index, float value) {
  _impl_.legfractions_.Set(index, value);
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.legfractions)
}
inline void MTM::_internal_add_legfractions(float value) {
  _impl_.legfractions_.Add(value);
}
inline void MTM::add_legfractions(float value) {
  _internal_add_legfractions(value);
  // @@protoc_insertion_point(field_add:FlumaionQL.MTM.legfractions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MTM::_internal_legfractions() const {
  return _impl_.legfractions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MTM::legfractions() const {
  // @@protoc_insertion_point(field_list:FlumaionQL.MTM.legfractions)
  return _internal_legfractions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MTM::_internal_mutable_legfractions() {
  return &_impl_.legfractions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MTM::mutable_legfractions() {
  // @@protoc_insertion_point(field_mutable_list:FlumaionQL.MTM.legfractions)
  return _internal_mutable_legfractions();
}

// bool haserrored = 9;
inline void MTM::clear_haserrored() {
  _impl_.haserrored_ = false;
}
inline bool MTM::_internal_haserrored() const {
  return _impl_.haserrored_;
}
inline bool MTM::haserrored() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.haserrored)
  return _internal_haserrored();
}
inline void MTM::_internal_set_haserrored(bool value) {
  
  _impl_.haserrored_ = value;
}
inline void MTM::set_haserrored(bool value) {
  _internal_set_haserrored(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.haserrored)
}

// string error = 10;
inline void MTM::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& MTM::error() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MTM::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.error)
}
inline std::string* MTM::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.MTM.error)
  return _s;
}
inline const std::string& MTM::_internal_error() const {
  return _impl_.error_.Get();
}
inline void MTM::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* MTM::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* MTM::release_error() {
  // @@protoc_insertion_point(field_release:FlumaionQL.MTM.error)
  return _impl_.error_.Release();
}
inline void MTM::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.MTM.error)
}

// int64 computetimemicros = 11;
inline void MTM::clear_computetimemicros() {
  _impl_.computetimemicros_ = int64_t{0};
}
inline int64_t MTM::_internal_computetimemicros() const {
  return _impl_.computetimemicros_;
}
inline int64_t MTM::computetimemicros() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.MTM.computetimemicros)
  return _internal_computetimemicros();
}
inline void MTM::_internal_set_computetimemicros(int64_t value) {
  
  _impl_.computetimemicros_ = value;
}
inline void MTM::set_computetimemicros(int64_t value) {
  _internal_set_computetimemicros(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.MTM.computetimemicros)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace FlumaionQL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mtms_2eproto
