// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_swap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_swap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_swap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_swap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_swap_2eproto;
namespace FlumaionQL {
class SwapTrade;
struct SwapTradeDefaultTypeInternal;
extern SwapTradeDefaultTypeInternal _SwapTrade_default_instance_;
}  // namespace FlumaionQL
PROTOBUF_NAMESPACE_OPEN
template<> ::FlumaionQL::SwapTrade* Arena::CreateMaybeMessage<::FlumaionQL::SwapTrade>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FlumaionQL {

// ===================================================================

class SwapTrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FlumaionQL.SwapTrade) */ {
 public:
  inline SwapTrade() : SwapTrade(nullptr) {}
  ~SwapTrade() override;
  explicit PROTOBUF_CONSTEXPR SwapTrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SwapTrade(const SwapTrade& from);
  SwapTrade(SwapTrade&& from) noexcept
    : SwapTrade() {
    *this = ::std::move(from);
  }

  inline SwapTrade& operator=(const SwapTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapTrade& operator=(SwapTrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SwapTrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const SwapTrade* internal_default_instance() {
    return reinterpret_cast<const SwapTrade*>(
               &_SwapTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SwapTrade& a, SwapTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapTrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapTrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SwapTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SwapTrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SwapTrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SwapTrade& from) {
    SwapTrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapTrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FlumaionQL.SwapTrade";
  }
  protected:
  explicit SwapTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeidFieldNumber = 1,
    kBookidFieldNumber = 2,
    kCounterpartyFieldNumber = 3,
    kFixedLegDccFieldNumber = 8,
    kFloatLegDccFieldNumber = 10,
    kIborIndexFieldNumber = 11,
    kFixedLegCalendarNameFieldNumber = 16,
    kFloatLegCalendarNameFieldNumber = 25,
    kNotionalFieldNumber = 4,
    kPayerReceiverFlagFieldNumber = 5,
    kSettlementDateFieldNumber = 6,
    kFixedRateFieldNumber = 7,
    kFloatSpreadFieldNumber = 9,
    kFixedLegStartDateFieldNumber = 12,
    kFixedLegEndDateFieldNumber = 13,
    kFixedLegTenorFrequencyFieldNumber = 14,
    kFixedLegTenorPeriodEnumFieldNumber = 15,
    kFixedLegBizDayConvFieldNumber = 17,
    kFixedLegTerminationDayConvFieldNumber = 18,
    kFloatLegStartDateFieldNumber = 21,
    kFixedLegDateGenRuleFieldNumber = 19,
    kFloatLegTenorFrequencyFieldNumber = 23,
    kFloatLegEndDateFieldNumber = 22,
    kFloatLegTenorPeriodEnumFieldNumber = 24,
    kFixedLegEndOfMonthFlagFieldNumber = 20,
    kFloatLegEndOfMonthFlagFieldNumber = 29,
    kFloatLegBizDayConvFieldNumber = 26,
    kFloatLegTerminationDayConvFieldNumber = 27,
    kFloatLegDateGenRuleFieldNumber = 28,
  };
  // string tradeid = 1;
  void clear_tradeid();
  const std::string& tradeid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tradeid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tradeid();
  PROTOBUF_NODISCARD std::string* release_tradeid();
  void set_allocated_tradeid(std::string* tradeid);
  private:
  const std::string& _internal_tradeid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tradeid(const std::string& value);
  std::string* _internal_mutable_tradeid();
  public:

  // string bookid = 2;
  void clear_bookid();
  const std::string& bookid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bookid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bookid();
  PROTOBUF_NODISCARD std::string* release_bookid();
  void set_allocated_bookid(std::string* bookid);
  private:
  const std::string& _internal_bookid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bookid(const std::string& value);
  std::string* _internal_mutable_bookid();
  public:

  // string counterparty = 3;
  void clear_counterparty();
  const std::string& counterparty() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_counterparty(ArgT0&& arg0, ArgT... args);
  std::string* mutable_counterparty();
  PROTOBUF_NODISCARD std::string* release_counterparty();
  void set_allocated_counterparty(std::string* counterparty);
  private:
  const std::string& _internal_counterparty() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counterparty(const std::string& value);
  std::string* _internal_mutable_counterparty();
  public:

  // string fixed_leg_dcc = 8;
  void clear_fixed_leg_dcc();
  const std::string& fixed_leg_dcc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fixed_leg_dcc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fixed_leg_dcc();
  PROTOBUF_NODISCARD std::string* release_fixed_leg_dcc();
  void set_allocated_fixed_leg_dcc(std::string* fixed_leg_dcc);
  private:
  const std::string& _internal_fixed_leg_dcc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fixed_leg_dcc(const std::string& value);
  std::string* _internal_mutable_fixed_leg_dcc();
  public:

  // string float_leg_dcc = 10;
  void clear_float_leg_dcc();
  const std::string& float_leg_dcc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_float_leg_dcc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_float_leg_dcc();
  PROTOBUF_NODISCARD std::string* release_float_leg_dcc();
  void set_allocated_float_leg_dcc(std::string* float_leg_dcc);
  private:
  const std::string& _internal_float_leg_dcc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_float_leg_dcc(const std::string& value);
  std::string* _internal_mutable_float_leg_dcc();
  public:

  // string ibor_index = 11;
  void clear_ibor_index();
  const std::string& ibor_index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ibor_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ibor_index();
  PROTOBUF_NODISCARD std::string* release_ibor_index();
  void set_allocated_ibor_index(std::string* ibor_index);
  private:
  const std::string& _internal_ibor_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ibor_index(const std::string& value);
  std::string* _internal_mutable_ibor_index();
  public:

  // string fixed_leg_calendar_name = 16;
  void clear_fixed_leg_calendar_name();
  const std::string& fixed_leg_calendar_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fixed_leg_calendar_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fixed_leg_calendar_name();
  PROTOBUF_NODISCARD std::string* release_fixed_leg_calendar_name();
  void set_allocated_fixed_leg_calendar_name(std::string* fixed_leg_calendar_name);
  private:
  const std::string& _internal_fixed_leg_calendar_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fixed_leg_calendar_name(const std::string& value);
  std::string* _internal_mutable_fixed_leg_calendar_name();
  public:

  // string float_leg_calendar_name = 25;
  void clear_float_leg_calendar_name();
  const std::string& float_leg_calendar_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_float_leg_calendar_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_float_leg_calendar_name();
  PROTOBUF_NODISCARD std::string* release_float_leg_calendar_name();
  void set_allocated_float_leg_calendar_name(std::string* float_leg_calendar_name);
  private:
  const std::string& _internal_float_leg_calendar_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_float_leg_calendar_name(const std::string& value);
  std::string* _internal_mutable_float_leg_calendar_name();
  public:

  // float notional = 4;
  void clear_notional();
  float notional() const;
  void set_notional(float value);
  private:
  float _internal_notional() const;
  void _internal_set_notional(float value);
  public:

  // int32 payer_receiver_flag = 5;
  void clear_payer_receiver_flag();
  int32_t payer_receiver_flag() const;
  void set_payer_receiver_flag(int32_t value);
  private:
  int32_t _internal_payer_receiver_flag() const;
  void _internal_set_payer_receiver_flag(int32_t value);
  public:

  // int64 settlement_date = 6;
  void clear_settlement_date();
  int64_t settlement_date() const;
  void set_settlement_date(int64_t value);
  private:
  int64_t _internal_settlement_date() const;
  void _internal_set_settlement_date(int64_t value);
  public:

  // float fixed_rate = 7;
  void clear_fixed_rate();
  float fixed_rate() const;
  void set_fixed_rate(float value);
  private:
  float _internal_fixed_rate() const;
  void _internal_set_fixed_rate(float value);
  public:

  // float float_spread = 9;
  void clear_float_spread();
  float float_spread() const;
  void set_float_spread(float value);
  private:
  float _internal_float_spread() const;
  void _internal_set_float_spread(float value);
  public:

  // int64 fixed_leg_start_date = 12;
  void clear_fixed_leg_start_date();
  int64_t fixed_leg_start_date() const;
  void set_fixed_leg_start_date(int64_t value);
  private:
  int64_t _internal_fixed_leg_start_date() const;
  void _internal_set_fixed_leg_start_date(int64_t value);
  public:

  // int64 fixed_leg_end_date = 13;
  void clear_fixed_leg_end_date();
  int64_t fixed_leg_end_date() const;
  void set_fixed_leg_end_date(int64_t value);
  private:
  int64_t _internal_fixed_leg_end_date() const;
  void _internal_set_fixed_leg_end_date(int64_t value);
  public:

  // int32 fixed_leg_tenor_frequency = 14;
  void clear_fixed_leg_tenor_frequency();
  int32_t fixed_leg_tenor_frequency() const;
  void set_fixed_leg_tenor_frequency(int32_t value);
  private:
  int32_t _internal_fixed_leg_tenor_frequency() const;
  void _internal_set_fixed_leg_tenor_frequency(int32_t value);
  public:

  // int32 fixed_leg_tenor_period_enum = 15;
  void clear_fixed_leg_tenor_period_enum();
  int32_t fixed_leg_tenor_period_enum() const;
  void set_fixed_leg_tenor_period_enum(int32_t value);
  private:
  int32_t _internal_fixed_leg_tenor_period_enum() const;
  void _internal_set_fixed_leg_tenor_period_enum(int32_t value);
  public:

  // int32 fixed_leg_biz_day_conv = 17;
  void clear_fixed_leg_biz_day_conv();
  int32_t fixed_leg_biz_day_conv() const;
  void set_fixed_leg_biz_day_conv(int32_t value);
  private:
  int32_t _internal_fixed_leg_biz_day_conv() const;
  void _internal_set_fixed_leg_biz_day_conv(int32_t value);
  public:

  // int32 fixed_leg_termination_day_conv = 18;
  void clear_fixed_leg_termination_day_conv();
  int32_t fixed_leg_termination_day_conv() const;
  void set_fixed_leg_termination_day_conv(int32_t value);
  private:
  int32_t _internal_fixed_leg_termination_day_conv() const;
  void _internal_set_fixed_leg_termination_day_conv(int32_t value);
  public:

  // int64 float_leg_start_date = 21;
  void clear_float_leg_start_date();
  int64_t float_leg_start_date() const;
  void set_float_leg_start_date(int64_t value);
  private:
  int64_t _internal_float_leg_start_date() const;
  void _internal_set_float_leg_start_date(int64_t value);
  public:

  // int32 fixed_leg_date_gen_rule = 19;
  void clear_fixed_leg_date_gen_rule();
  int32_t fixed_leg_date_gen_rule() const;
  void set_fixed_leg_date_gen_rule(int32_t value);
  private:
  int32_t _internal_fixed_leg_date_gen_rule() const;
  void _internal_set_fixed_leg_date_gen_rule(int32_t value);
  public:

  // int32 float_leg_tenor_frequency = 23;
  void clear_float_leg_tenor_frequency();
  int32_t float_leg_tenor_frequency() const;
  void set_float_leg_tenor_frequency(int32_t value);
  private:
  int32_t _internal_float_leg_tenor_frequency() const;
  void _internal_set_float_leg_tenor_frequency(int32_t value);
  public:

  // int64 float_leg_end_date = 22;
  void clear_float_leg_end_date();
  int64_t float_leg_end_date() const;
  void set_float_leg_end_date(int64_t value);
  private:
  int64_t _internal_float_leg_end_date() const;
  void _internal_set_float_leg_end_date(int64_t value);
  public:

  // int32 float_leg_tenor_period_enum = 24;
  void clear_float_leg_tenor_period_enum();
  int32_t float_leg_tenor_period_enum() const;
  void set_float_leg_tenor_period_enum(int32_t value);
  private:
  int32_t _internal_float_leg_tenor_period_enum() const;
  void _internal_set_float_leg_tenor_period_enum(int32_t value);
  public:

  // bool fixed_leg_end_of_month_flag = 20;
  void clear_fixed_leg_end_of_month_flag();
  bool fixed_leg_end_of_month_flag() const;
  void set_fixed_leg_end_of_month_flag(bool value);
  private:
  bool _internal_fixed_leg_end_of_month_flag() const;
  void _internal_set_fixed_leg_end_of_month_flag(bool value);
  public:

  // bool float_leg_end_of_month_flag = 29;
  void clear_float_leg_end_of_month_flag();
  bool float_leg_end_of_month_flag() const;
  void set_float_leg_end_of_month_flag(bool value);
  private:
  bool _internal_float_leg_end_of_month_flag() const;
  void _internal_set_float_leg_end_of_month_flag(bool value);
  public:

  // int32 float_leg_biz_day_conv = 26;
  void clear_float_leg_biz_day_conv();
  int32_t float_leg_biz_day_conv() const;
  void set_float_leg_biz_day_conv(int32_t value);
  private:
  int32_t _internal_float_leg_biz_day_conv() const;
  void _internal_set_float_leg_biz_day_conv(int32_t value);
  public:

  // int32 float_leg_termination_day_conv = 27;
  void clear_float_leg_termination_day_conv();
  int32_t float_leg_termination_day_conv() const;
  void set_float_leg_termination_day_conv(int32_t value);
  private:
  int32_t _internal_float_leg_termination_day_conv() const;
  void _internal_set_float_leg_termination_day_conv(int32_t value);
  public:

  // int32 float_leg_date_gen_rule = 28;
  void clear_float_leg_date_gen_rule();
  int32_t float_leg_date_gen_rule() const;
  void set_float_leg_date_gen_rule(int32_t value);
  private:
  int32_t _internal_float_leg_date_gen_rule() const;
  void _internal_set_float_leg_date_gen_rule(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FlumaionQL.SwapTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradeid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counterparty_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_leg_dcc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr float_leg_dcc_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ibor_index_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_leg_calendar_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr float_leg_calendar_name_;
    float notional_;
    int32_t payer_receiver_flag_;
    int64_t settlement_date_;
    float fixed_rate_;
    float float_spread_;
    int64_t fixed_leg_start_date_;
    int64_t fixed_leg_end_date_;
    int32_t fixed_leg_tenor_frequency_;
    int32_t fixed_leg_tenor_period_enum_;
    int32_t fixed_leg_biz_day_conv_;
    int32_t fixed_leg_termination_day_conv_;
    int64_t float_leg_start_date_;
    int32_t fixed_leg_date_gen_rule_;
    int32_t float_leg_tenor_frequency_;
    int64_t float_leg_end_date_;
    int32_t float_leg_tenor_period_enum_;
    bool fixed_leg_end_of_month_flag_;
    bool float_leg_end_of_month_flag_;
    int32_t float_leg_biz_day_conv_;
    int32_t float_leg_termination_day_conv_;
    int32_t float_leg_date_gen_rule_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_swap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SwapTrade

// string tradeid = 1;
inline void SwapTrade::clear_tradeid() {
  _impl_.tradeid_.ClearToEmpty();
}
inline const std::string& SwapTrade::tradeid() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.tradeid)
  return _internal_tradeid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapTrade::set_tradeid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.tradeid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.tradeid)
}
inline std::string* SwapTrade::mutable_tradeid() {
  std::string* _s = _internal_mutable_tradeid();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.tradeid)
  return _s;
}
inline const std::string& SwapTrade::_internal_tradeid() const {
  return _impl_.tradeid_.Get();
}
inline void SwapTrade::_internal_set_tradeid(const std::string& value) {
  
  _impl_.tradeid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapTrade::_internal_mutable_tradeid() {
  
  return _impl_.tradeid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapTrade::release_tradeid() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.tradeid)
  return _impl_.tradeid_.Release();
}
inline void SwapTrade::set_allocated_tradeid(std::string* tradeid) {
  if (tradeid != nullptr) {
    
  } else {
    
  }
  _impl_.tradeid_.SetAllocated(tradeid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tradeid_.IsDefault()) {
    _impl_.tradeid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.tradeid)
}

// string bookid = 2;
inline void SwapTrade::clear_bookid() {
  _impl_.bookid_.ClearToEmpty();
}
inline const std::string& SwapTrade::bookid() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.bookid)
  return _internal_bookid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapTrade::set_bookid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bookid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.bookid)
}
inline std::string* SwapTrade::mutable_bookid() {
  std::string* _s = _internal_mutable_bookid();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.bookid)
  return _s;
}
inline const std::string& SwapTrade::_internal_bookid() const {
  return _impl_.bookid_.Get();
}
inline void SwapTrade::_internal_set_bookid(const std::string& value) {
  
  _impl_.bookid_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapTrade::_internal_mutable_bookid() {
  
  return _impl_.bookid_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapTrade::release_bookid() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.bookid)
  return _impl_.bookid_.Release();
}
inline void SwapTrade::set_allocated_bookid(std::string* bookid) {
  if (bookid != nullptr) {
    
  } else {
    
  }
  _impl_.bookid_.SetAllocated(bookid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bookid_.IsDefault()) {
    _impl_.bookid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.bookid)
}

// string counterparty = 3;
inline void SwapTrade::clear_counterparty() {
  _impl_.counterparty_.ClearToEmpty();
}
inline const std::string& SwapTrade::counterparty() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.counterparty)
  return _internal_counterparty();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapTrade::set_counterparty(ArgT0&& arg0, ArgT... args) {
 
 _impl_.counterparty_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.counterparty)
}
inline std::string* SwapTrade::mutable_counterparty() {
  std::string* _s = _internal_mutable_counterparty();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.counterparty)
  return _s;
}
inline const std::string& SwapTrade::_internal_counterparty() const {
  return _impl_.counterparty_.Get();
}
inline void SwapTrade::_internal_set_counterparty(const std::string& value) {
  
  _impl_.counterparty_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapTrade::_internal_mutable_counterparty() {
  
  return _impl_.counterparty_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapTrade::release_counterparty() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.counterparty)
  return _impl_.counterparty_.Release();
}
inline void SwapTrade::set_allocated_counterparty(std::string* counterparty) {
  if (counterparty != nullptr) {
    
  } else {
    
  }
  _impl_.counterparty_.SetAllocated(counterparty, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.counterparty_.IsDefault()) {
    _impl_.counterparty_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.counterparty)
}

// float notional = 4;
inline void SwapTrade::clear_notional() {
  _impl_.notional_ = 0;
}
inline float SwapTrade::_internal_notional() const {
  return _impl_.notional_;
}
inline float SwapTrade::notional() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.notional)
  return _internal_notional();
}
inline void SwapTrade::_internal_set_notional(float value) {
  
  _impl_.notional_ = value;
}
inline void SwapTrade::set_notional(float value) {
  _internal_set_notional(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.notional)
}

// int32 payer_receiver_flag = 5;
inline void SwapTrade::clear_payer_receiver_flag() {
  _impl_.payer_receiver_flag_ = 0;
}
inline int32_t SwapTrade::_internal_payer_receiver_flag() const {
  return _impl_.payer_receiver_flag_;
}
inline int32_t SwapTrade::payer_receiver_flag() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.payer_receiver_flag)
  return _internal_payer_receiver_flag();
}
inline void SwapTrade::_internal_set_payer_receiver_flag(int32_t value) {
  
  _impl_.payer_receiver_flag_ = value;
}
inline void SwapTrade::set_payer_receiver_flag(int32_t value) {
  _internal_set_payer_receiver_flag(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.payer_receiver_flag)
}

// int64 settlement_date = 6;
inline void SwapTrade::clear_settlement_date() {
  _impl_.settlement_date_ = int64_t{0};
}
inline int64_t SwapTrade::_internal_settlement_date() const {
  return _impl_.settlement_date_;
}
inline int64_t SwapTrade::settlement_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.settlement_date)
  return _internal_settlement_date();
}
inline void SwapTrade::_internal_set_settlement_date(int64_t value) {
  
  _impl_.settlement_date_ = value;
}
inline void SwapTrade::set_settlement_date(int64_t value) {
  _internal_set_settlement_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.settlement_date)
}

// float fixed_rate = 7;
inline void SwapTrade::clear_fixed_rate() {
  _impl_.fixed_rate_ = 0;
}
inline float SwapTrade::_internal_fixed_rate() const {
  return _impl_.fixed_rate_;
}
inline float SwapTrade::fixed_rate() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_rate)
  return _internal_fixed_rate();
}
inline void SwapTrade::_internal_set_fixed_rate(float value) {
  
  _impl_.fixed_rate_ = value;
}
inline void SwapTrade::set_fixed_rate(float value) {
  _internal_set_fixed_rate(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_rate)
}

// string fixed_leg_dcc = 8;
inline void SwapTrade::clear_fixed_leg_dcc() {
  _impl_.fixed_leg_dcc_.ClearToEmpty();
}
inline const std::string& SwapTrade::fixed_leg_dcc() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_dcc)
  return _internal_fixed_leg_dcc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapTrade::set_fixed_leg_dcc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fixed_leg_dcc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_dcc)
}
inline std::string* SwapTrade::mutable_fixed_leg_dcc() {
  std::string* _s = _internal_mutable_fixed_leg_dcc();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.fixed_leg_dcc)
  return _s;
}
inline const std::string& SwapTrade::_internal_fixed_leg_dcc() const {
  return _impl_.fixed_leg_dcc_.Get();
}
inline void SwapTrade::_internal_set_fixed_leg_dcc(const std::string& value) {
  
  _impl_.fixed_leg_dcc_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapTrade::_internal_mutable_fixed_leg_dcc() {
  
  return _impl_.fixed_leg_dcc_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapTrade::release_fixed_leg_dcc() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.fixed_leg_dcc)
  return _impl_.fixed_leg_dcc_.Release();
}
inline void SwapTrade::set_allocated_fixed_leg_dcc(std::string* fixed_leg_dcc) {
  if (fixed_leg_dcc != nullptr) {
    
  } else {
    
  }
  _impl_.fixed_leg_dcc_.SetAllocated(fixed_leg_dcc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fixed_leg_dcc_.IsDefault()) {
    _impl_.fixed_leg_dcc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.fixed_leg_dcc)
}

// float float_spread = 9;
inline void SwapTrade::clear_float_spread() {
  _impl_.float_spread_ = 0;
}
inline float SwapTrade::_internal_float_spread() const {
  return _impl_.float_spread_;
}
inline float SwapTrade::float_spread() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_spread)
  return _internal_float_spread();
}
inline void SwapTrade::_internal_set_float_spread(float value) {
  
  _impl_.float_spread_ = value;
}
inline void SwapTrade::set_float_spread(float value) {
  _internal_set_float_spread(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_spread)
}

// string float_leg_dcc = 10;
inline void SwapTrade::clear_float_leg_dcc() {
  _impl_.float_leg_dcc_.ClearToEmpty();
}
inline const std::string& SwapTrade::float_leg_dcc() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_dcc)
  return _internal_float_leg_dcc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapTrade::set_float_leg_dcc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.float_leg_dcc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_dcc)
}
inline std::string* SwapTrade::mutable_float_leg_dcc() {
  std::string* _s = _internal_mutable_float_leg_dcc();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.float_leg_dcc)
  return _s;
}
inline const std::string& SwapTrade::_internal_float_leg_dcc() const {
  return _impl_.float_leg_dcc_.Get();
}
inline void SwapTrade::_internal_set_float_leg_dcc(const std::string& value) {
  
  _impl_.float_leg_dcc_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapTrade::_internal_mutable_float_leg_dcc() {
  
  return _impl_.float_leg_dcc_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapTrade::release_float_leg_dcc() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.float_leg_dcc)
  return _impl_.float_leg_dcc_.Release();
}
inline void SwapTrade::set_allocated_float_leg_dcc(std::string* float_leg_dcc) {
  if (float_leg_dcc != nullptr) {
    
  } else {
    
  }
  _impl_.float_leg_dcc_.SetAllocated(float_leg_dcc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.float_leg_dcc_.IsDefault()) {
    _impl_.float_leg_dcc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.float_leg_dcc)
}

// string ibor_index = 11;
inline void SwapTrade::clear_ibor_index() {
  _impl_.ibor_index_.ClearToEmpty();
}
inline const std::string& SwapTrade::ibor_index() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.ibor_index)
  return _internal_ibor_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapTrade::set_ibor_index(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ibor_index_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.ibor_index)
}
inline std::string* SwapTrade::mutable_ibor_index() {
  std::string* _s = _internal_mutable_ibor_index();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.ibor_index)
  return _s;
}
inline const std::string& SwapTrade::_internal_ibor_index() const {
  return _impl_.ibor_index_.Get();
}
inline void SwapTrade::_internal_set_ibor_index(const std::string& value) {
  
  _impl_.ibor_index_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapTrade::_internal_mutable_ibor_index() {
  
  return _impl_.ibor_index_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapTrade::release_ibor_index() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.ibor_index)
  return _impl_.ibor_index_.Release();
}
inline void SwapTrade::set_allocated_ibor_index(std::string* ibor_index) {
  if (ibor_index != nullptr) {
    
  } else {
    
  }
  _impl_.ibor_index_.SetAllocated(ibor_index, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ibor_index_.IsDefault()) {
    _impl_.ibor_index_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.ibor_index)
}

// int64 fixed_leg_start_date = 12;
inline void SwapTrade::clear_fixed_leg_start_date() {
  _impl_.fixed_leg_start_date_ = int64_t{0};
}
inline int64_t SwapTrade::_internal_fixed_leg_start_date() const {
  return _impl_.fixed_leg_start_date_;
}
inline int64_t SwapTrade::fixed_leg_start_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_start_date)
  return _internal_fixed_leg_start_date();
}
inline void SwapTrade::_internal_set_fixed_leg_start_date(int64_t value) {
  
  _impl_.fixed_leg_start_date_ = value;
}
inline void SwapTrade::set_fixed_leg_start_date(int64_t value) {
  _internal_set_fixed_leg_start_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_start_date)
}

// int64 fixed_leg_end_date = 13;
inline void SwapTrade::clear_fixed_leg_end_date() {
  _impl_.fixed_leg_end_date_ = int64_t{0};
}
inline int64_t SwapTrade::_internal_fixed_leg_end_date() const {
  return _impl_.fixed_leg_end_date_;
}
inline int64_t SwapTrade::fixed_leg_end_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_end_date)
  return _internal_fixed_leg_end_date();
}
inline void SwapTrade::_internal_set_fixed_leg_end_date(int64_t value) {
  
  _impl_.fixed_leg_end_date_ = value;
}
inline void SwapTrade::set_fixed_leg_end_date(int64_t value) {
  _internal_set_fixed_leg_end_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_end_date)
}

// int32 fixed_leg_tenor_frequency = 14;
inline void SwapTrade::clear_fixed_leg_tenor_frequency() {
  _impl_.fixed_leg_tenor_frequency_ = 0;
}
inline int32_t SwapTrade::_internal_fixed_leg_tenor_frequency() const {
  return _impl_.fixed_leg_tenor_frequency_;
}
inline int32_t SwapTrade::fixed_leg_tenor_frequency() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_tenor_frequency)
  return _internal_fixed_leg_tenor_frequency();
}
inline void SwapTrade::_internal_set_fixed_leg_tenor_frequency(int32_t value) {
  
  _impl_.fixed_leg_tenor_frequency_ = value;
}
inline void SwapTrade::set_fixed_leg_tenor_frequency(int32_t value) {
  _internal_set_fixed_leg_tenor_frequency(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_tenor_frequency)
}

// int32 fixed_leg_tenor_period_enum = 15;
inline void SwapTrade::clear_fixed_leg_tenor_period_enum() {
  _impl_.fixed_leg_tenor_period_enum_ = 0;
}
inline int32_t SwapTrade::_internal_fixed_leg_tenor_period_enum() const {
  return _impl_.fixed_leg_tenor_period_enum_;
}
inline int32_t SwapTrade::fixed_leg_tenor_period_enum() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_tenor_period_enum)
  return _internal_fixed_leg_tenor_period_enum();
}
inline void SwapTrade::_internal_set_fixed_leg_tenor_period_enum(int32_t value) {
  
  _impl_.fixed_leg_tenor_period_enum_ = value;
}
inline void SwapTrade::set_fixed_leg_tenor_period_enum(int32_t value) {
  _internal_set_fixed_leg_tenor_period_enum(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_tenor_period_enum)
}

// string fixed_leg_calendar_name = 16;
inline void SwapTrade::clear_fixed_leg_calendar_name() {
  _impl_.fixed_leg_calendar_name_.ClearToEmpty();
}
inline const std::string& SwapTrade::fixed_leg_calendar_name() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
  return _internal_fixed_leg_calendar_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapTrade::set_fixed_leg_calendar_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.fixed_leg_calendar_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
}
inline std::string* SwapTrade::mutable_fixed_leg_calendar_name() {
  std::string* _s = _internal_mutable_fixed_leg_calendar_name();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
  return _s;
}
inline const std::string& SwapTrade::_internal_fixed_leg_calendar_name() const {
  return _impl_.fixed_leg_calendar_name_.Get();
}
inline void SwapTrade::_internal_set_fixed_leg_calendar_name(const std::string& value) {
  
  _impl_.fixed_leg_calendar_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapTrade::_internal_mutable_fixed_leg_calendar_name() {
  
  return _impl_.fixed_leg_calendar_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapTrade::release_fixed_leg_calendar_name() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
  return _impl_.fixed_leg_calendar_name_.Release();
}
inline void SwapTrade::set_allocated_fixed_leg_calendar_name(std::string* fixed_leg_calendar_name) {
  if (fixed_leg_calendar_name != nullptr) {
    
  } else {
    
  }
  _impl_.fixed_leg_calendar_name_.SetAllocated(fixed_leg_calendar_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.fixed_leg_calendar_name_.IsDefault()) {
    _impl_.fixed_leg_calendar_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
}

// int32 fixed_leg_biz_day_conv = 17;
inline void SwapTrade::clear_fixed_leg_biz_day_conv() {
  _impl_.fixed_leg_biz_day_conv_ = 0;
}
inline int32_t SwapTrade::_internal_fixed_leg_biz_day_conv() const {
  return _impl_.fixed_leg_biz_day_conv_;
}
inline int32_t SwapTrade::fixed_leg_biz_day_conv() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_biz_day_conv)
  return _internal_fixed_leg_biz_day_conv();
}
inline void SwapTrade::_internal_set_fixed_leg_biz_day_conv(int32_t value) {
  
  _impl_.fixed_leg_biz_day_conv_ = value;
}
inline void SwapTrade::set_fixed_leg_biz_day_conv(int32_t value) {
  _internal_set_fixed_leg_biz_day_conv(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_biz_day_conv)
}

// int32 fixed_leg_termination_day_conv = 18;
inline void SwapTrade::clear_fixed_leg_termination_day_conv() {
  _impl_.fixed_leg_termination_day_conv_ = 0;
}
inline int32_t SwapTrade::_internal_fixed_leg_termination_day_conv() const {
  return _impl_.fixed_leg_termination_day_conv_;
}
inline int32_t SwapTrade::fixed_leg_termination_day_conv() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_termination_day_conv)
  return _internal_fixed_leg_termination_day_conv();
}
inline void SwapTrade::_internal_set_fixed_leg_termination_day_conv(int32_t value) {
  
  _impl_.fixed_leg_termination_day_conv_ = value;
}
inline void SwapTrade::set_fixed_leg_termination_day_conv(int32_t value) {
  _internal_set_fixed_leg_termination_day_conv(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_termination_day_conv)
}

// int32 fixed_leg_date_gen_rule = 19;
inline void SwapTrade::clear_fixed_leg_date_gen_rule() {
  _impl_.fixed_leg_date_gen_rule_ = 0;
}
inline int32_t SwapTrade::_internal_fixed_leg_date_gen_rule() const {
  return _impl_.fixed_leg_date_gen_rule_;
}
inline int32_t SwapTrade::fixed_leg_date_gen_rule() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_date_gen_rule)
  return _internal_fixed_leg_date_gen_rule();
}
inline void SwapTrade::_internal_set_fixed_leg_date_gen_rule(int32_t value) {
  
  _impl_.fixed_leg_date_gen_rule_ = value;
}
inline void SwapTrade::set_fixed_leg_date_gen_rule(int32_t value) {
  _internal_set_fixed_leg_date_gen_rule(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_date_gen_rule)
}

// bool fixed_leg_end_of_month_flag = 20;
inline void SwapTrade::clear_fixed_leg_end_of_month_flag() {
  _impl_.fixed_leg_end_of_month_flag_ = false;
}
inline bool SwapTrade::_internal_fixed_leg_end_of_month_flag() const {
  return _impl_.fixed_leg_end_of_month_flag_;
}
inline bool SwapTrade::fixed_leg_end_of_month_flag() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_end_of_month_flag)
  return _internal_fixed_leg_end_of_month_flag();
}
inline void SwapTrade::_internal_set_fixed_leg_end_of_month_flag(bool value) {
  
  _impl_.fixed_leg_end_of_month_flag_ = value;
}
inline void SwapTrade::set_fixed_leg_end_of_month_flag(bool value) {
  _internal_set_fixed_leg_end_of_month_flag(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_end_of_month_flag)
}

// int64 float_leg_start_date = 21;
inline void SwapTrade::clear_float_leg_start_date() {
  _impl_.float_leg_start_date_ = int64_t{0};
}
inline int64_t SwapTrade::_internal_float_leg_start_date() const {
  return _impl_.float_leg_start_date_;
}
inline int64_t SwapTrade::float_leg_start_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_start_date)
  return _internal_float_leg_start_date();
}
inline void SwapTrade::_internal_set_float_leg_start_date(int64_t value) {
  
  _impl_.float_leg_start_date_ = value;
}
inline void SwapTrade::set_float_leg_start_date(int64_t value) {
  _internal_set_float_leg_start_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_start_date)
}

// int64 float_leg_end_date = 22;
inline void SwapTrade::clear_float_leg_end_date() {
  _impl_.float_leg_end_date_ = int64_t{0};
}
inline int64_t SwapTrade::_internal_float_leg_end_date() const {
  return _impl_.float_leg_end_date_;
}
inline int64_t SwapTrade::float_leg_end_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_end_date)
  return _internal_float_leg_end_date();
}
inline void SwapTrade::_internal_set_float_leg_end_date(int64_t value) {
  
  _impl_.float_leg_end_date_ = value;
}
inline void SwapTrade::set_float_leg_end_date(int64_t value) {
  _internal_set_float_leg_end_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_end_date)
}

// int32 float_leg_tenor_frequency = 23;
inline void SwapTrade::clear_float_leg_tenor_frequency() {
  _impl_.float_leg_tenor_frequency_ = 0;
}
inline int32_t SwapTrade::_internal_float_leg_tenor_frequency() const {
  return _impl_.float_leg_tenor_frequency_;
}
inline int32_t SwapTrade::float_leg_tenor_frequency() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_tenor_frequency)
  return _internal_float_leg_tenor_frequency();
}
inline void SwapTrade::_internal_set_float_leg_tenor_frequency(int32_t value) {
  
  _impl_.float_leg_tenor_frequency_ = value;
}
inline void SwapTrade::set_float_leg_tenor_frequency(int32_t value) {
  _internal_set_float_leg_tenor_frequency(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_tenor_frequency)
}

// int32 float_leg_tenor_period_enum = 24;
inline void SwapTrade::clear_float_leg_tenor_period_enum() {
  _impl_.float_leg_tenor_period_enum_ = 0;
}
inline int32_t SwapTrade::_internal_float_leg_tenor_period_enum() const {
  return _impl_.float_leg_tenor_period_enum_;
}
inline int32_t SwapTrade::float_leg_tenor_period_enum() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_tenor_period_enum)
  return _internal_float_leg_tenor_period_enum();
}
inline void SwapTrade::_internal_set_float_leg_tenor_period_enum(int32_t value) {
  
  _impl_.float_leg_tenor_period_enum_ = value;
}
inline void SwapTrade::set_float_leg_tenor_period_enum(int32_t value) {
  _internal_set_float_leg_tenor_period_enum(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_tenor_period_enum)
}

// string float_leg_calendar_name = 25;
inline void SwapTrade::clear_float_leg_calendar_name() {
  _impl_.float_leg_calendar_name_.ClearToEmpty();
}
inline const std::string& SwapTrade::float_leg_calendar_name() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_calendar_name)
  return _internal_float_leg_calendar_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SwapTrade::set_float_leg_calendar_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.float_leg_calendar_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_calendar_name)
}
inline std::string* SwapTrade::mutable_float_leg_calendar_name() {
  std::string* _s = _internal_mutable_float_leg_calendar_name();
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.float_leg_calendar_name)
  return _s;
}
inline const std::string& SwapTrade::_internal_float_leg_calendar_name() const {
  return _impl_.float_leg_calendar_name_.Get();
}
inline void SwapTrade::_internal_set_float_leg_calendar_name(const std::string& value) {
  
  _impl_.float_leg_calendar_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SwapTrade::_internal_mutable_float_leg_calendar_name() {
  
  return _impl_.float_leg_calendar_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SwapTrade::release_float_leg_calendar_name() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.float_leg_calendar_name)
  return _impl_.float_leg_calendar_name_.Release();
}
inline void SwapTrade::set_allocated_float_leg_calendar_name(std::string* float_leg_calendar_name) {
  if (float_leg_calendar_name != nullptr) {
    
  } else {
    
  }
  _impl_.float_leg_calendar_name_.SetAllocated(float_leg_calendar_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.float_leg_calendar_name_.IsDefault()) {
    _impl_.float_leg_calendar_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.float_leg_calendar_name)
}

// int32 float_leg_biz_day_conv = 26;
inline void SwapTrade::clear_float_leg_biz_day_conv() {
  _impl_.float_leg_biz_day_conv_ = 0;
}
inline int32_t SwapTrade::_internal_float_leg_biz_day_conv() const {
  return _impl_.float_leg_biz_day_conv_;
}
inline int32_t SwapTrade::float_leg_biz_day_conv() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_biz_day_conv)
  return _internal_float_leg_biz_day_conv();
}
inline void SwapTrade::_internal_set_float_leg_biz_day_conv(int32_t value) {
  
  _impl_.float_leg_biz_day_conv_ = value;
}
inline void SwapTrade::set_float_leg_biz_day_conv(int32_t value) {
  _internal_set_float_leg_biz_day_conv(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_biz_day_conv)
}

// int32 float_leg_termination_day_conv = 27;
inline void SwapTrade::clear_float_leg_termination_day_conv() {
  _impl_.float_leg_termination_day_conv_ = 0;
}
inline int32_t SwapTrade::_internal_float_leg_termination_day_conv() const {
  return _impl_.float_leg_termination_day_conv_;
}
inline int32_t SwapTrade::float_leg_termination_day_conv() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_termination_day_conv)
  return _internal_float_leg_termination_day_conv();
}
inline void SwapTrade::_internal_set_float_leg_termination_day_conv(int32_t value) {
  
  _impl_.float_leg_termination_day_conv_ = value;
}
inline void SwapTrade::set_float_leg_termination_day_conv(int32_t value) {
  _internal_set_float_leg_termination_day_conv(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_termination_day_conv)
}

// int32 float_leg_date_gen_rule = 28;
inline void SwapTrade::clear_float_leg_date_gen_rule() {
  _impl_.float_leg_date_gen_rule_ = 0;
}
inline int32_t SwapTrade::_internal_float_leg_date_gen_rule() const {
  return _impl_.float_leg_date_gen_rule_;
}
inline int32_t SwapTrade::float_leg_date_gen_rule() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_date_gen_rule)
  return _internal_float_leg_date_gen_rule();
}
inline void SwapTrade::_internal_set_float_leg_date_gen_rule(int32_t value) {
  
  _impl_.float_leg_date_gen_rule_ = value;
}
inline void SwapTrade::set_float_leg_date_gen_rule(int32_t value) {
  _internal_set_float_leg_date_gen_rule(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_date_gen_rule)
}

// bool float_leg_end_of_month_flag = 29;
inline void SwapTrade::clear_float_leg_end_of_month_flag() {
  _impl_.float_leg_end_of_month_flag_ = false;
}
inline bool SwapTrade::_internal_float_leg_end_of_month_flag() const {
  return _impl_.float_leg_end_of_month_flag_;
}
inline bool SwapTrade::float_leg_end_of_month_flag() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_end_of_month_flag)
  return _internal_float_leg_end_of_month_flag();
}
inline void SwapTrade::_internal_set_float_leg_end_of_month_flag(bool value) {
  
  _impl_.float_leg_end_of_month_flag_ = value;
}
inline void SwapTrade::set_float_leg_end_of_month_flag(bool value) {
  _internal_set_float_leg_end_of_month_flag(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_end_of_month_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace FlumaionQL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_swap_2eproto
