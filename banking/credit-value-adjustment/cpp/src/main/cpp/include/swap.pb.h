// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swap.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_swap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_swap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_swap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_swap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_swap_2eproto;
namespace FlumaionQL {
class SwapTrade;
class SwapTradeDefaultTypeInternal;
extern SwapTradeDefaultTypeInternal _SwapTrade_default_instance_;
}  // namespace FlumaionQL
PROTOBUF_NAMESPACE_OPEN
template<> ::FlumaionQL::SwapTrade* Arena::CreateMaybeMessage<::FlumaionQL::SwapTrade>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FlumaionQL {

// ===================================================================

class SwapTrade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FlumaionQL.SwapTrade) */ {
 public:
  inline SwapTrade() : SwapTrade(nullptr) {};
  virtual ~SwapTrade();

  SwapTrade(const SwapTrade& from);
  SwapTrade(SwapTrade&& from) noexcept
    : SwapTrade() {
    *this = ::std::move(from);
  }

  inline SwapTrade& operator=(const SwapTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapTrade& operator=(SwapTrade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwapTrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapTrade* internal_default_instance() {
    return reinterpret_cast<const SwapTrade*>(
               &_SwapTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SwapTrade& a, SwapTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapTrade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwapTrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapTrade* New() const final {
    return CreateMaybeMessage<SwapTrade>(nullptr);
  }

  SwapTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapTrade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwapTrade& from);
  void MergeFrom(const SwapTrade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapTrade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FlumaionQL.SwapTrade";
  }
  protected:
  explicit SwapTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_swap_2eproto);
    return ::descriptor_table_swap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeidFieldNumber = 1,
    kBookidFieldNumber = 2,
    kCounterpartyFieldNumber = 3,
    kFixedLegDccFieldNumber = 8,
    kFloatLegDccFieldNumber = 10,
    kIborIndexFieldNumber = 11,
    kFixedLegCalendarNameFieldNumber = 16,
    kFloatLegCalendarNameFieldNumber = 25,
    kNotionalFieldNumber = 4,
    kPayerReceiverFlagFieldNumber = 5,
    kSettlementDateFieldNumber = 6,
    kFixedRateFieldNumber = 7,
    kFloatSpreadFieldNumber = 9,
    kFixedLegStartDateFieldNumber = 12,
    kFixedLegEndDateFieldNumber = 13,
    kFixedLegTenorFrequencyFieldNumber = 14,
    kFixedLegTenorPeriodEnumFieldNumber = 15,
    kFixedLegBizDayConvFieldNumber = 17,
    kFixedLegTerminationDayConvFieldNumber = 18,
    kFloatLegStartDateFieldNumber = 21,
    kFixedLegDateGenRuleFieldNumber = 19,
    kFloatLegTenorFrequencyFieldNumber = 23,
    kFloatLegEndDateFieldNumber = 22,
    kFloatLegTenorPeriodEnumFieldNumber = 24,
    kFixedLegEndOfMonthFlagFieldNumber = 20,
    kFloatLegEndOfMonthFlagFieldNumber = 29,
    kFloatLegBizDayConvFieldNumber = 26,
    kFloatLegTerminationDayConvFieldNumber = 27,
    kFloatLegDateGenRuleFieldNumber = 28,
  };
  // string tradeid = 1;
  void clear_tradeid();
  const std::string& tradeid() const;
  void set_tradeid(const std::string& value);
  void set_tradeid(std::string&& value);
  void set_tradeid(const char* value);
  void set_tradeid(const char* value, size_t size);
  std::string* mutable_tradeid();
  std::string* release_tradeid();
  void set_allocated_tradeid(std::string* tradeid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tradeid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tradeid(
      std::string* tradeid);
  private:
  const std::string& _internal_tradeid() const;
  void _internal_set_tradeid(const std::string& value);
  std::string* _internal_mutable_tradeid();
  public:

  // string bookid = 2;
  void clear_bookid();
  const std::string& bookid() const;
  void set_bookid(const std::string& value);
  void set_bookid(std::string&& value);
  void set_bookid(const char* value);
  void set_bookid(const char* value, size_t size);
  std::string* mutable_bookid();
  std::string* release_bookid();
  void set_allocated_bookid(std::string* bookid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bookid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bookid(
      std::string* bookid);
  private:
  const std::string& _internal_bookid() const;
  void _internal_set_bookid(const std::string& value);
  std::string* _internal_mutable_bookid();
  public:

  // string counterparty = 3;
  void clear_counterparty();
  const std::string& counterparty() const;
  void set_counterparty(const std::string& value);
  void set_counterparty(std::string&& value);
  void set_counterparty(const char* value);
  void set_counterparty(const char* value, size_t size);
  std::string* mutable_counterparty();
  std::string* release_counterparty();
  void set_allocated_counterparty(std::string* counterparty);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_counterparty();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_counterparty(
      std::string* counterparty);
  private:
  const std::string& _internal_counterparty() const;
  void _internal_set_counterparty(const std::string& value);
  std::string* _internal_mutable_counterparty();
  public:

  // string fixed_leg_dcc = 8;
  void clear_fixed_leg_dcc();
  const std::string& fixed_leg_dcc() const;
  void set_fixed_leg_dcc(const std::string& value);
  void set_fixed_leg_dcc(std::string&& value);
  void set_fixed_leg_dcc(const char* value);
  void set_fixed_leg_dcc(const char* value, size_t size);
  std::string* mutable_fixed_leg_dcc();
  std::string* release_fixed_leg_dcc();
  void set_allocated_fixed_leg_dcc(std::string* fixed_leg_dcc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fixed_leg_dcc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fixed_leg_dcc(
      std::string* fixed_leg_dcc);
  private:
  const std::string& _internal_fixed_leg_dcc() const;
  void _internal_set_fixed_leg_dcc(const std::string& value);
  std::string* _internal_mutable_fixed_leg_dcc();
  public:

  // string float_leg_dcc = 10;
  void clear_float_leg_dcc();
  const std::string& float_leg_dcc() const;
  void set_float_leg_dcc(const std::string& value);
  void set_float_leg_dcc(std::string&& value);
  void set_float_leg_dcc(const char* value);
  void set_float_leg_dcc(const char* value, size_t size);
  std::string* mutable_float_leg_dcc();
  std::string* release_float_leg_dcc();
  void set_allocated_float_leg_dcc(std::string* float_leg_dcc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_float_leg_dcc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_float_leg_dcc(
      std::string* float_leg_dcc);
  private:
  const std::string& _internal_float_leg_dcc() const;
  void _internal_set_float_leg_dcc(const std::string& value);
  std::string* _internal_mutable_float_leg_dcc();
  public:

  // string ibor_index = 11;
  void clear_ibor_index();
  const std::string& ibor_index() const;
  void set_ibor_index(const std::string& value);
  void set_ibor_index(std::string&& value);
  void set_ibor_index(const char* value);
  void set_ibor_index(const char* value, size_t size);
  std::string* mutable_ibor_index();
  std::string* release_ibor_index();
  void set_allocated_ibor_index(std::string* ibor_index);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ibor_index();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ibor_index(
      std::string* ibor_index);
  private:
  const std::string& _internal_ibor_index() const;
  void _internal_set_ibor_index(const std::string& value);
  std::string* _internal_mutable_ibor_index();
  public:

  // string fixed_leg_calendar_name = 16;
  void clear_fixed_leg_calendar_name();
  const std::string& fixed_leg_calendar_name() const;
  void set_fixed_leg_calendar_name(const std::string& value);
  void set_fixed_leg_calendar_name(std::string&& value);
  void set_fixed_leg_calendar_name(const char* value);
  void set_fixed_leg_calendar_name(const char* value, size_t size);
  std::string* mutable_fixed_leg_calendar_name();
  std::string* release_fixed_leg_calendar_name();
  void set_allocated_fixed_leg_calendar_name(std::string* fixed_leg_calendar_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_fixed_leg_calendar_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_fixed_leg_calendar_name(
      std::string* fixed_leg_calendar_name);
  private:
  const std::string& _internal_fixed_leg_calendar_name() const;
  void _internal_set_fixed_leg_calendar_name(const std::string& value);
  std::string* _internal_mutable_fixed_leg_calendar_name();
  public:

  // string float_leg_calendar_name = 25;
  void clear_float_leg_calendar_name();
  const std::string& float_leg_calendar_name() const;
  void set_float_leg_calendar_name(const std::string& value);
  void set_float_leg_calendar_name(std::string&& value);
  void set_float_leg_calendar_name(const char* value);
  void set_float_leg_calendar_name(const char* value, size_t size);
  std::string* mutable_float_leg_calendar_name();
  std::string* release_float_leg_calendar_name();
  void set_allocated_float_leg_calendar_name(std::string* float_leg_calendar_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_float_leg_calendar_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_float_leg_calendar_name(
      std::string* float_leg_calendar_name);
  private:
  const std::string& _internal_float_leg_calendar_name() const;
  void _internal_set_float_leg_calendar_name(const std::string& value);
  std::string* _internal_mutable_float_leg_calendar_name();
  public:

  // float notional = 4;
  void clear_notional();
  float notional() const;
  void set_notional(float value);
  private:
  float _internal_notional() const;
  void _internal_set_notional(float value);
  public:

  // int32 payer_receiver_flag = 5;
  void clear_payer_receiver_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 payer_receiver_flag() const;
  void set_payer_receiver_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_payer_receiver_flag() const;
  void _internal_set_payer_receiver_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 settlement_date = 6;
  void clear_settlement_date();
  ::PROTOBUF_NAMESPACE_ID::int64 settlement_date() const;
  void set_settlement_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_settlement_date() const;
  void _internal_set_settlement_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float fixed_rate = 7;
  void clear_fixed_rate();
  float fixed_rate() const;
  void set_fixed_rate(float value);
  private:
  float _internal_fixed_rate() const;
  void _internal_set_fixed_rate(float value);
  public:

  // float float_spread = 9;
  void clear_float_spread();
  float float_spread() const;
  void set_float_spread(float value);
  private:
  float _internal_float_spread() const;
  void _internal_set_float_spread(float value);
  public:

  // int64 fixed_leg_start_date = 12;
  void clear_fixed_leg_start_date();
  ::PROTOBUF_NAMESPACE_ID::int64 fixed_leg_start_date() const;
  void set_fixed_leg_start_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fixed_leg_start_date() const;
  void _internal_set_fixed_leg_start_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fixed_leg_end_date = 13;
  void clear_fixed_leg_end_date();
  ::PROTOBUF_NAMESPACE_ID::int64 fixed_leg_end_date() const;
  void set_fixed_leg_end_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fixed_leg_end_date() const;
  void _internal_set_fixed_leg_end_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 fixed_leg_tenor_frequency = 14;
  void clear_fixed_leg_tenor_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_tenor_frequency() const;
  void set_fixed_leg_tenor_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fixed_leg_tenor_frequency() const;
  void _internal_set_fixed_leg_tenor_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fixed_leg_tenor_period_enum = 15;
  void clear_fixed_leg_tenor_period_enum();
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_tenor_period_enum() const;
  void set_fixed_leg_tenor_period_enum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fixed_leg_tenor_period_enum() const;
  void _internal_set_fixed_leg_tenor_period_enum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fixed_leg_biz_day_conv = 17;
  void clear_fixed_leg_biz_day_conv();
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_biz_day_conv() const;
  void set_fixed_leg_biz_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fixed_leg_biz_day_conv() const;
  void _internal_set_fixed_leg_biz_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fixed_leg_termination_day_conv = 18;
  void clear_fixed_leg_termination_day_conv();
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_termination_day_conv() const;
  void set_fixed_leg_termination_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fixed_leg_termination_day_conv() const;
  void _internal_set_fixed_leg_termination_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 float_leg_start_date = 21;
  void clear_float_leg_start_date();
  ::PROTOBUF_NAMESPACE_ID::int64 float_leg_start_date() const;
  void set_float_leg_start_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_float_leg_start_date() const;
  void _internal_set_float_leg_start_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 fixed_leg_date_gen_rule = 19;
  void clear_fixed_leg_date_gen_rule();
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_date_gen_rule() const;
  void set_fixed_leg_date_gen_rule(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fixed_leg_date_gen_rule() const;
  void _internal_set_fixed_leg_date_gen_rule(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 float_leg_tenor_frequency = 23;
  void clear_float_leg_tenor_frequency();
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_tenor_frequency() const;
  void set_float_leg_tenor_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_float_leg_tenor_frequency() const;
  void _internal_set_float_leg_tenor_frequency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 float_leg_end_date = 22;
  void clear_float_leg_end_date();
  ::PROTOBUF_NAMESPACE_ID::int64 float_leg_end_date() const;
  void set_float_leg_end_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_float_leg_end_date() const;
  void _internal_set_float_leg_end_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 float_leg_tenor_period_enum = 24;
  void clear_float_leg_tenor_period_enum();
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_tenor_period_enum() const;
  void set_float_leg_tenor_period_enum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_float_leg_tenor_period_enum() const;
  void _internal_set_float_leg_tenor_period_enum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool fixed_leg_end_of_month_flag = 20;
  void clear_fixed_leg_end_of_month_flag();
  bool fixed_leg_end_of_month_flag() const;
  void set_fixed_leg_end_of_month_flag(bool value);
  private:
  bool _internal_fixed_leg_end_of_month_flag() const;
  void _internal_set_fixed_leg_end_of_month_flag(bool value);
  public:

  // bool float_leg_end_of_month_flag = 29;
  void clear_float_leg_end_of_month_flag();
  bool float_leg_end_of_month_flag() const;
  void set_float_leg_end_of_month_flag(bool value);
  private:
  bool _internal_float_leg_end_of_month_flag() const;
  void _internal_set_float_leg_end_of_month_flag(bool value);
  public:

  // int32 float_leg_biz_day_conv = 26;
  void clear_float_leg_biz_day_conv();
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_biz_day_conv() const;
  void set_float_leg_biz_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_float_leg_biz_day_conv() const;
  void _internal_set_float_leg_biz_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 float_leg_termination_day_conv = 27;
  void clear_float_leg_termination_day_conv();
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_termination_day_conv() const;
  void set_float_leg_termination_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_float_leg_termination_day_conv() const;
  void _internal_set_float_leg_termination_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 float_leg_date_gen_rule = 28;
  void clear_float_leg_date_gen_rule();
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_date_gen_rule() const;
  void set_float_leg_date_gen_rule(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_float_leg_date_gen_rule() const;
  void _internal_set_float_leg_date_gen_rule(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:FlumaionQL.SwapTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counterparty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_leg_dcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr float_leg_dcc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ibor_index_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_leg_calendar_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr float_leg_calendar_name_;
  float notional_;
  ::PROTOBUF_NAMESPACE_ID::int32 payer_receiver_flag_;
  ::PROTOBUF_NAMESPACE_ID::int64 settlement_date_;
  float fixed_rate_;
  float float_spread_;
  ::PROTOBUF_NAMESPACE_ID::int64 fixed_leg_start_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 fixed_leg_end_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_tenor_frequency_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_tenor_period_enum_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_biz_day_conv_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_termination_day_conv_;
  ::PROTOBUF_NAMESPACE_ID::int64 float_leg_start_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixed_leg_date_gen_rule_;
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_tenor_frequency_;
  ::PROTOBUF_NAMESPACE_ID::int64 float_leg_end_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_tenor_period_enum_;
  bool fixed_leg_end_of_month_flag_;
  bool float_leg_end_of_month_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_biz_day_conv_;
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_termination_day_conv_;
  ::PROTOBUF_NAMESPACE_ID::int32 float_leg_date_gen_rule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_swap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SwapTrade

// string tradeid = 1;
inline void SwapTrade::clear_tradeid() {
  tradeid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwapTrade::tradeid() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.tradeid)
  return _internal_tradeid();
}
inline void SwapTrade::set_tradeid(const std::string& value) {
  _internal_set_tradeid(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.tradeid)
}
inline std::string* SwapTrade::mutable_tradeid() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.tradeid)
  return _internal_mutable_tradeid();
}
inline const std::string& SwapTrade::_internal_tradeid() const {
  return tradeid_.Get();
}
inline void SwapTrade::_internal_set_tradeid(const std::string& value) {
  
  tradeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwapTrade::set_tradeid(std::string&& value) {
  
  tradeid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.SwapTrade.tradeid)
}
inline void SwapTrade::set_tradeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlumaionQL.SwapTrade.tradeid)
}
inline void SwapTrade::set_tradeid(const char* value,
    size_t size) {
  
  tradeid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.SwapTrade.tradeid)
}
inline std::string* SwapTrade::_internal_mutable_tradeid() {
  
  return tradeid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwapTrade::release_tradeid() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.tradeid)
  return tradeid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwapTrade::set_allocated_tradeid(std::string* tradeid) {
  if (tradeid != nullptr) {
    
  } else {
    
  }
  tradeid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradeid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.tradeid)
}
inline std::string* SwapTrade::unsafe_arena_release_tradeid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlumaionQL.SwapTrade.tradeid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tradeid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwapTrade::unsafe_arena_set_allocated_tradeid(
    std::string* tradeid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tradeid != nullptr) {
    
  } else {
    
  }
  tradeid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tradeid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlumaionQL.SwapTrade.tradeid)
}

// string bookid = 2;
inline void SwapTrade::clear_bookid() {
  bookid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwapTrade::bookid() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.bookid)
  return _internal_bookid();
}
inline void SwapTrade::set_bookid(const std::string& value) {
  _internal_set_bookid(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.bookid)
}
inline std::string* SwapTrade::mutable_bookid() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.bookid)
  return _internal_mutable_bookid();
}
inline const std::string& SwapTrade::_internal_bookid() const {
  return bookid_.Get();
}
inline void SwapTrade::_internal_set_bookid(const std::string& value) {
  
  bookid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwapTrade::set_bookid(std::string&& value) {
  
  bookid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.SwapTrade.bookid)
}
inline void SwapTrade::set_bookid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bookid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlumaionQL.SwapTrade.bookid)
}
inline void SwapTrade::set_bookid(const char* value,
    size_t size) {
  
  bookid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.SwapTrade.bookid)
}
inline std::string* SwapTrade::_internal_mutable_bookid() {
  
  return bookid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwapTrade::release_bookid() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.bookid)
  return bookid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwapTrade::set_allocated_bookid(std::string* bookid) {
  if (bookid != nullptr) {
    
  } else {
    
  }
  bookid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bookid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.bookid)
}
inline std::string* SwapTrade::unsafe_arena_release_bookid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlumaionQL.SwapTrade.bookid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bookid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwapTrade::unsafe_arena_set_allocated_bookid(
    std::string* bookid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bookid != nullptr) {
    
  } else {
    
  }
  bookid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bookid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlumaionQL.SwapTrade.bookid)
}

// string counterparty = 3;
inline void SwapTrade::clear_counterparty() {
  counterparty_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwapTrade::counterparty() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.counterparty)
  return _internal_counterparty();
}
inline void SwapTrade::set_counterparty(const std::string& value) {
  _internal_set_counterparty(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.counterparty)
}
inline std::string* SwapTrade::mutable_counterparty() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.counterparty)
  return _internal_mutable_counterparty();
}
inline const std::string& SwapTrade::_internal_counterparty() const {
  return counterparty_.Get();
}
inline void SwapTrade::_internal_set_counterparty(const std::string& value) {
  
  counterparty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwapTrade::set_counterparty(std::string&& value) {
  
  counterparty_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.SwapTrade.counterparty)
}
inline void SwapTrade::set_counterparty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  counterparty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlumaionQL.SwapTrade.counterparty)
}
inline void SwapTrade::set_counterparty(const char* value,
    size_t size) {
  
  counterparty_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.SwapTrade.counterparty)
}
inline std::string* SwapTrade::_internal_mutable_counterparty() {
  
  return counterparty_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwapTrade::release_counterparty() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.counterparty)
  return counterparty_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwapTrade::set_allocated_counterparty(std::string* counterparty) {
  if (counterparty != nullptr) {
    
  } else {
    
  }
  counterparty_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), counterparty,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.counterparty)
}
inline std::string* SwapTrade::unsafe_arena_release_counterparty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlumaionQL.SwapTrade.counterparty)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return counterparty_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwapTrade::unsafe_arena_set_allocated_counterparty(
    std::string* counterparty) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (counterparty != nullptr) {
    
  } else {
    
  }
  counterparty_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      counterparty, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlumaionQL.SwapTrade.counterparty)
}

// float notional = 4;
inline void SwapTrade::clear_notional() {
  notional_ = 0;
}
inline float SwapTrade::_internal_notional() const {
  return notional_;
}
inline float SwapTrade::notional() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.notional)
  return _internal_notional();
}
inline void SwapTrade::_internal_set_notional(float value) {
  
  notional_ = value;
}
inline void SwapTrade::set_notional(float value) {
  _internal_set_notional(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.notional)
}

// int32 payer_receiver_flag = 5;
inline void SwapTrade::clear_payer_receiver_flag() {
  payer_receiver_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_payer_receiver_flag() const {
  return payer_receiver_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::payer_receiver_flag() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.payer_receiver_flag)
  return _internal_payer_receiver_flag();
}
inline void SwapTrade::_internal_set_payer_receiver_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  payer_receiver_flag_ = value;
}
inline void SwapTrade::set_payer_receiver_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_payer_receiver_flag(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.payer_receiver_flag)
}

// int64 settlement_date = 6;
inline void SwapTrade::clear_settlement_date() {
  settlement_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::_internal_settlement_date() const {
  return settlement_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::settlement_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.settlement_date)
  return _internal_settlement_date();
}
inline void SwapTrade::_internal_set_settlement_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  settlement_date_ = value;
}
inline void SwapTrade::set_settlement_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_settlement_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.settlement_date)
}

// float fixed_rate = 7;
inline void SwapTrade::clear_fixed_rate() {
  fixed_rate_ = 0;
}
inline float SwapTrade::_internal_fixed_rate() const {
  return fixed_rate_;
}
inline float SwapTrade::fixed_rate() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_rate)
  return _internal_fixed_rate();
}
inline void SwapTrade::_internal_set_fixed_rate(float value) {
  
  fixed_rate_ = value;
}
inline void SwapTrade::set_fixed_rate(float value) {
  _internal_set_fixed_rate(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_rate)
}

// string fixed_leg_dcc = 8;
inline void SwapTrade::clear_fixed_leg_dcc() {
  fixed_leg_dcc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwapTrade::fixed_leg_dcc() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_dcc)
  return _internal_fixed_leg_dcc();
}
inline void SwapTrade::set_fixed_leg_dcc(const std::string& value) {
  _internal_set_fixed_leg_dcc(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_dcc)
}
inline std::string* SwapTrade::mutable_fixed_leg_dcc() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.fixed_leg_dcc)
  return _internal_mutable_fixed_leg_dcc();
}
inline const std::string& SwapTrade::_internal_fixed_leg_dcc() const {
  return fixed_leg_dcc_.Get();
}
inline void SwapTrade::_internal_set_fixed_leg_dcc(const std::string& value) {
  
  fixed_leg_dcc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwapTrade::set_fixed_leg_dcc(std::string&& value) {
  
  fixed_leg_dcc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.SwapTrade.fixed_leg_dcc)
}
inline void SwapTrade::set_fixed_leg_dcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fixed_leg_dcc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlumaionQL.SwapTrade.fixed_leg_dcc)
}
inline void SwapTrade::set_fixed_leg_dcc(const char* value,
    size_t size) {
  
  fixed_leg_dcc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.SwapTrade.fixed_leg_dcc)
}
inline std::string* SwapTrade::_internal_mutable_fixed_leg_dcc() {
  
  return fixed_leg_dcc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwapTrade::release_fixed_leg_dcc() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.fixed_leg_dcc)
  return fixed_leg_dcc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwapTrade::set_allocated_fixed_leg_dcc(std::string* fixed_leg_dcc) {
  if (fixed_leg_dcc != nullptr) {
    
  } else {
    
  }
  fixed_leg_dcc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fixed_leg_dcc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.fixed_leg_dcc)
}
inline std::string* SwapTrade::unsafe_arena_release_fixed_leg_dcc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlumaionQL.SwapTrade.fixed_leg_dcc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fixed_leg_dcc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwapTrade::unsafe_arena_set_allocated_fixed_leg_dcc(
    std::string* fixed_leg_dcc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fixed_leg_dcc != nullptr) {
    
  } else {
    
  }
  fixed_leg_dcc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fixed_leg_dcc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlumaionQL.SwapTrade.fixed_leg_dcc)
}

// float float_spread = 9;
inline void SwapTrade::clear_float_spread() {
  float_spread_ = 0;
}
inline float SwapTrade::_internal_float_spread() const {
  return float_spread_;
}
inline float SwapTrade::float_spread() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_spread)
  return _internal_float_spread();
}
inline void SwapTrade::_internal_set_float_spread(float value) {
  
  float_spread_ = value;
}
inline void SwapTrade::set_float_spread(float value) {
  _internal_set_float_spread(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_spread)
}

// string float_leg_dcc = 10;
inline void SwapTrade::clear_float_leg_dcc() {
  float_leg_dcc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwapTrade::float_leg_dcc() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_dcc)
  return _internal_float_leg_dcc();
}
inline void SwapTrade::set_float_leg_dcc(const std::string& value) {
  _internal_set_float_leg_dcc(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_dcc)
}
inline std::string* SwapTrade::mutable_float_leg_dcc() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.float_leg_dcc)
  return _internal_mutable_float_leg_dcc();
}
inline const std::string& SwapTrade::_internal_float_leg_dcc() const {
  return float_leg_dcc_.Get();
}
inline void SwapTrade::_internal_set_float_leg_dcc(const std::string& value) {
  
  float_leg_dcc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwapTrade::set_float_leg_dcc(std::string&& value) {
  
  float_leg_dcc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.SwapTrade.float_leg_dcc)
}
inline void SwapTrade::set_float_leg_dcc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  float_leg_dcc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlumaionQL.SwapTrade.float_leg_dcc)
}
inline void SwapTrade::set_float_leg_dcc(const char* value,
    size_t size) {
  
  float_leg_dcc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.SwapTrade.float_leg_dcc)
}
inline std::string* SwapTrade::_internal_mutable_float_leg_dcc() {
  
  return float_leg_dcc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwapTrade::release_float_leg_dcc() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.float_leg_dcc)
  return float_leg_dcc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwapTrade::set_allocated_float_leg_dcc(std::string* float_leg_dcc) {
  if (float_leg_dcc != nullptr) {
    
  } else {
    
  }
  float_leg_dcc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), float_leg_dcc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.float_leg_dcc)
}
inline std::string* SwapTrade::unsafe_arena_release_float_leg_dcc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlumaionQL.SwapTrade.float_leg_dcc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return float_leg_dcc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwapTrade::unsafe_arena_set_allocated_float_leg_dcc(
    std::string* float_leg_dcc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (float_leg_dcc != nullptr) {
    
  } else {
    
  }
  float_leg_dcc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      float_leg_dcc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlumaionQL.SwapTrade.float_leg_dcc)
}

// string ibor_index = 11;
inline void SwapTrade::clear_ibor_index() {
  ibor_index_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwapTrade::ibor_index() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.ibor_index)
  return _internal_ibor_index();
}
inline void SwapTrade::set_ibor_index(const std::string& value) {
  _internal_set_ibor_index(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.ibor_index)
}
inline std::string* SwapTrade::mutable_ibor_index() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.ibor_index)
  return _internal_mutable_ibor_index();
}
inline const std::string& SwapTrade::_internal_ibor_index() const {
  return ibor_index_.Get();
}
inline void SwapTrade::_internal_set_ibor_index(const std::string& value) {
  
  ibor_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwapTrade::set_ibor_index(std::string&& value) {
  
  ibor_index_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.SwapTrade.ibor_index)
}
inline void SwapTrade::set_ibor_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ibor_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlumaionQL.SwapTrade.ibor_index)
}
inline void SwapTrade::set_ibor_index(const char* value,
    size_t size) {
  
  ibor_index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.SwapTrade.ibor_index)
}
inline std::string* SwapTrade::_internal_mutable_ibor_index() {
  
  return ibor_index_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwapTrade::release_ibor_index() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.ibor_index)
  return ibor_index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwapTrade::set_allocated_ibor_index(std::string* ibor_index) {
  if (ibor_index != nullptr) {
    
  } else {
    
  }
  ibor_index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ibor_index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.ibor_index)
}
inline std::string* SwapTrade::unsafe_arena_release_ibor_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlumaionQL.SwapTrade.ibor_index)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ibor_index_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwapTrade::unsafe_arena_set_allocated_ibor_index(
    std::string* ibor_index) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ibor_index != nullptr) {
    
  } else {
    
  }
  ibor_index_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ibor_index, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlumaionQL.SwapTrade.ibor_index)
}

// int64 fixed_leg_start_date = 12;
inline void SwapTrade::clear_fixed_leg_start_date() {
  fixed_leg_start_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::_internal_fixed_leg_start_date() const {
  return fixed_leg_start_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::fixed_leg_start_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_start_date)
  return _internal_fixed_leg_start_date();
}
inline void SwapTrade::_internal_set_fixed_leg_start_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fixed_leg_start_date_ = value;
}
inline void SwapTrade::set_fixed_leg_start_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fixed_leg_start_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_start_date)
}

// int64 fixed_leg_end_date = 13;
inline void SwapTrade::clear_fixed_leg_end_date() {
  fixed_leg_end_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::_internal_fixed_leg_end_date() const {
  return fixed_leg_end_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::fixed_leg_end_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_end_date)
  return _internal_fixed_leg_end_date();
}
inline void SwapTrade::_internal_set_fixed_leg_end_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fixed_leg_end_date_ = value;
}
inline void SwapTrade::set_fixed_leg_end_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fixed_leg_end_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_end_date)
}

// int32 fixed_leg_tenor_frequency = 14;
inline void SwapTrade::clear_fixed_leg_tenor_frequency() {
  fixed_leg_tenor_frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_fixed_leg_tenor_frequency() const {
  return fixed_leg_tenor_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::fixed_leg_tenor_frequency() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_tenor_frequency)
  return _internal_fixed_leg_tenor_frequency();
}
inline void SwapTrade::_internal_set_fixed_leg_tenor_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fixed_leg_tenor_frequency_ = value;
}
inline void SwapTrade::set_fixed_leg_tenor_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fixed_leg_tenor_frequency(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_tenor_frequency)
}

// int32 fixed_leg_tenor_period_enum = 15;
inline void SwapTrade::clear_fixed_leg_tenor_period_enum() {
  fixed_leg_tenor_period_enum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_fixed_leg_tenor_period_enum() const {
  return fixed_leg_tenor_period_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::fixed_leg_tenor_period_enum() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_tenor_period_enum)
  return _internal_fixed_leg_tenor_period_enum();
}
inline void SwapTrade::_internal_set_fixed_leg_tenor_period_enum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fixed_leg_tenor_period_enum_ = value;
}
inline void SwapTrade::set_fixed_leg_tenor_period_enum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fixed_leg_tenor_period_enum(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_tenor_period_enum)
}

// string fixed_leg_calendar_name = 16;
inline void SwapTrade::clear_fixed_leg_calendar_name() {
  fixed_leg_calendar_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwapTrade::fixed_leg_calendar_name() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
  return _internal_fixed_leg_calendar_name();
}
inline void SwapTrade::set_fixed_leg_calendar_name(const std::string& value) {
  _internal_set_fixed_leg_calendar_name(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
}
inline std::string* SwapTrade::mutable_fixed_leg_calendar_name() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
  return _internal_mutable_fixed_leg_calendar_name();
}
inline const std::string& SwapTrade::_internal_fixed_leg_calendar_name() const {
  return fixed_leg_calendar_name_.Get();
}
inline void SwapTrade::_internal_set_fixed_leg_calendar_name(const std::string& value) {
  
  fixed_leg_calendar_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwapTrade::set_fixed_leg_calendar_name(std::string&& value) {
  
  fixed_leg_calendar_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
}
inline void SwapTrade::set_fixed_leg_calendar_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fixed_leg_calendar_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
}
inline void SwapTrade::set_fixed_leg_calendar_name(const char* value,
    size_t size) {
  
  fixed_leg_calendar_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
}
inline std::string* SwapTrade::_internal_mutable_fixed_leg_calendar_name() {
  
  return fixed_leg_calendar_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwapTrade::release_fixed_leg_calendar_name() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
  return fixed_leg_calendar_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwapTrade::set_allocated_fixed_leg_calendar_name(std::string* fixed_leg_calendar_name) {
  if (fixed_leg_calendar_name != nullptr) {
    
  } else {
    
  }
  fixed_leg_calendar_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fixed_leg_calendar_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
}
inline std::string* SwapTrade::unsafe_arena_release_fixed_leg_calendar_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return fixed_leg_calendar_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwapTrade::unsafe_arena_set_allocated_fixed_leg_calendar_name(
    std::string* fixed_leg_calendar_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (fixed_leg_calendar_name != nullptr) {
    
  } else {
    
  }
  fixed_leg_calendar_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      fixed_leg_calendar_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlumaionQL.SwapTrade.fixed_leg_calendar_name)
}

// int32 fixed_leg_biz_day_conv = 17;
inline void SwapTrade::clear_fixed_leg_biz_day_conv() {
  fixed_leg_biz_day_conv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_fixed_leg_biz_day_conv() const {
  return fixed_leg_biz_day_conv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::fixed_leg_biz_day_conv() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_biz_day_conv)
  return _internal_fixed_leg_biz_day_conv();
}
inline void SwapTrade::_internal_set_fixed_leg_biz_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fixed_leg_biz_day_conv_ = value;
}
inline void SwapTrade::set_fixed_leg_biz_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fixed_leg_biz_day_conv(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_biz_day_conv)
}

// int32 fixed_leg_termination_day_conv = 18;
inline void SwapTrade::clear_fixed_leg_termination_day_conv() {
  fixed_leg_termination_day_conv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_fixed_leg_termination_day_conv() const {
  return fixed_leg_termination_day_conv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::fixed_leg_termination_day_conv() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_termination_day_conv)
  return _internal_fixed_leg_termination_day_conv();
}
inline void SwapTrade::_internal_set_fixed_leg_termination_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fixed_leg_termination_day_conv_ = value;
}
inline void SwapTrade::set_fixed_leg_termination_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fixed_leg_termination_day_conv(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_termination_day_conv)
}

// int32 fixed_leg_date_gen_rule = 19;
inline void SwapTrade::clear_fixed_leg_date_gen_rule() {
  fixed_leg_date_gen_rule_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_fixed_leg_date_gen_rule() const {
  return fixed_leg_date_gen_rule_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::fixed_leg_date_gen_rule() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_date_gen_rule)
  return _internal_fixed_leg_date_gen_rule();
}
inline void SwapTrade::_internal_set_fixed_leg_date_gen_rule(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fixed_leg_date_gen_rule_ = value;
}
inline void SwapTrade::set_fixed_leg_date_gen_rule(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fixed_leg_date_gen_rule(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_date_gen_rule)
}

// bool fixed_leg_end_of_month_flag = 20;
inline void SwapTrade::clear_fixed_leg_end_of_month_flag() {
  fixed_leg_end_of_month_flag_ = false;
}
inline bool SwapTrade::_internal_fixed_leg_end_of_month_flag() const {
  return fixed_leg_end_of_month_flag_;
}
inline bool SwapTrade::fixed_leg_end_of_month_flag() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.fixed_leg_end_of_month_flag)
  return _internal_fixed_leg_end_of_month_flag();
}
inline void SwapTrade::_internal_set_fixed_leg_end_of_month_flag(bool value) {
  
  fixed_leg_end_of_month_flag_ = value;
}
inline void SwapTrade::set_fixed_leg_end_of_month_flag(bool value) {
  _internal_set_fixed_leg_end_of_month_flag(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.fixed_leg_end_of_month_flag)
}

// int64 float_leg_start_date = 21;
inline void SwapTrade::clear_float_leg_start_date() {
  float_leg_start_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::_internal_float_leg_start_date() const {
  return float_leg_start_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::float_leg_start_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_start_date)
  return _internal_float_leg_start_date();
}
inline void SwapTrade::_internal_set_float_leg_start_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  float_leg_start_date_ = value;
}
inline void SwapTrade::set_float_leg_start_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_float_leg_start_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_start_date)
}

// int64 float_leg_end_date = 22;
inline void SwapTrade::clear_float_leg_end_date() {
  float_leg_end_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::_internal_float_leg_end_date() const {
  return float_leg_end_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapTrade::float_leg_end_date() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_end_date)
  return _internal_float_leg_end_date();
}
inline void SwapTrade::_internal_set_float_leg_end_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  float_leg_end_date_ = value;
}
inline void SwapTrade::set_float_leg_end_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_float_leg_end_date(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_end_date)
}

// int32 float_leg_tenor_frequency = 23;
inline void SwapTrade::clear_float_leg_tenor_frequency() {
  float_leg_tenor_frequency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_float_leg_tenor_frequency() const {
  return float_leg_tenor_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::float_leg_tenor_frequency() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_tenor_frequency)
  return _internal_float_leg_tenor_frequency();
}
inline void SwapTrade::_internal_set_float_leg_tenor_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  float_leg_tenor_frequency_ = value;
}
inline void SwapTrade::set_float_leg_tenor_frequency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_float_leg_tenor_frequency(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_tenor_frequency)
}

// int32 float_leg_tenor_period_enum = 24;
inline void SwapTrade::clear_float_leg_tenor_period_enum() {
  float_leg_tenor_period_enum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_float_leg_tenor_period_enum() const {
  return float_leg_tenor_period_enum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::float_leg_tenor_period_enum() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_tenor_period_enum)
  return _internal_float_leg_tenor_period_enum();
}
inline void SwapTrade::_internal_set_float_leg_tenor_period_enum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  float_leg_tenor_period_enum_ = value;
}
inline void SwapTrade::set_float_leg_tenor_period_enum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_float_leg_tenor_period_enum(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_tenor_period_enum)
}

// string float_leg_calendar_name = 25;
inline void SwapTrade::clear_float_leg_calendar_name() {
  float_leg_calendar_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwapTrade::float_leg_calendar_name() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_calendar_name)
  return _internal_float_leg_calendar_name();
}
inline void SwapTrade::set_float_leg_calendar_name(const std::string& value) {
  _internal_set_float_leg_calendar_name(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_calendar_name)
}
inline std::string* SwapTrade::mutable_float_leg_calendar_name() {
  // @@protoc_insertion_point(field_mutable:FlumaionQL.SwapTrade.float_leg_calendar_name)
  return _internal_mutable_float_leg_calendar_name();
}
inline const std::string& SwapTrade::_internal_float_leg_calendar_name() const {
  return float_leg_calendar_name_.Get();
}
inline void SwapTrade::_internal_set_float_leg_calendar_name(const std::string& value) {
  
  float_leg_calendar_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwapTrade::set_float_leg_calendar_name(std::string&& value) {
  
  float_leg_calendar_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:FlumaionQL.SwapTrade.float_leg_calendar_name)
}
inline void SwapTrade::set_float_leg_calendar_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  float_leg_calendar_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:FlumaionQL.SwapTrade.float_leg_calendar_name)
}
inline void SwapTrade::set_float_leg_calendar_name(const char* value,
    size_t size) {
  
  float_leg_calendar_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:FlumaionQL.SwapTrade.float_leg_calendar_name)
}
inline std::string* SwapTrade::_internal_mutable_float_leg_calendar_name() {
  
  return float_leg_calendar_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwapTrade::release_float_leg_calendar_name() {
  // @@protoc_insertion_point(field_release:FlumaionQL.SwapTrade.float_leg_calendar_name)
  return float_leg_calendar_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwapTrade::set_allocated_float_leg_calendar_name(std::string* float_leg_calendar_name) {
  if (float_leg_calendar_name != nullptr) {
    
  } else {
    
  }
  float_leg_calendar_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), float_leg_calendar_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:FlumaionQL.SwapTrade.float_leg_calendar_name)
}
inline std::string* SwapTrade::unsafe_arena_release_float_leg_calendar_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:FlumaionQL.SwapTrade.float_leg_calendar_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return float_leg_calendar_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwapTrade::unsafe_arena_set_allocated_float_leg_calendar_name(
    std::string* float_leg_calendar_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (float_leg_calendar_name != nullptr) {
    
  } else {
    
  }
  float_leg_calendar_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      float_leg_calendar_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:FlumaionQL.SwapTrade.float_leg_calendar_name)
}

// int32 float_leg_biz_day_conv = 26;
inline void SwapTrade::clear_float_leg_biz_day_conv() {
  float_leg_biz_day_conv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_float_leg_biz_day_conv() const {
  return float_leg_biz_day_conv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::float_leg_biz_day_conv() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_biz_day_conv)
  return _internal_float_leg_biz_day_conv();
}
inline void SwapTrade::_internal_set_float_leg_biz_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  float_leg_biz_day_conv_ = value;
}
inline void SwapTrade::set_float_leg_biz_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_float_leg_biz_day_conv(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_biz_day_conv)
}

// int32 float_leg_termination_day_conv = 27;
inline void SwapTrade::clear_float_leg_termination_day_conv() {
  float_leg_termination_day_conv_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_float_leg_termination_day_conv() const {
  return float_leg_termination_day_conv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::float_leg_termination_day_conv() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_termination_day_conv)
  return _internal_float_leg_termination_day_conv();
}
inline void SwapTrade::_internal_set_float_leg_termination_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  float_leg_termination_day_conv_ = value;
}
inline void SwapTrade::set_float_leg_termination_day_conv(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_float_leg_termination_day_conv(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_termination_day_conv)
}

// int32 float_leg_date_gen_rule = 28;
inline void SwapTrade::clear_float_leg_date_gen_rule() {
  float_leg_date_gen_rule_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::_internal_float_leg_date_gen_rule() const {
  return float_leg_date_gen_rule_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwapTrade::float_leg_date_gen_rule() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_date_gen_rule)
  return _internal_float_leg_date_gen_rule();
}
inline void SwapTrade::_internal_set_float_leg_date_gen_rule(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  float_leg_date_gen_rule_ = value;
}
inline void SwapTrade::set_float_leg_date_gen_rule(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_float_leg_date_gen_rule(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_date_gen_rule)
}

// bool float_leg_end_of_month_flag = 29;
inline void SwapTrade::clear_float_leg_end_of_month_flag() {
  float_leg_end_of_month_flag_ = false;
}
inline bool SwapTrade::_internal_float_leg_end_of_month_flag() const {
  return float_leg_end_of_month_flag_;
}
inline bool SwapTrade::float_leg_end_of_month_flag() const {
  // @@protoc_insertion_point(field_get:FlumaionQL.SwapTrade.float_leg_end_of_month_flag)
  return _internal_float_leg_end_of_month_flag();
}
inline void SwapTrade::_internal_set_float_leg_end_of_month_flag(bool value) {
  
  float_leg_end_of_month_flag_ = value;
}
inline void SwapTrade::set_float_leg_end_of_month_flag(bool value) {
  _internal_set_float_leg_end_of_month_flag(value);
  // @@protoc_insertion_point(field_set:FlumaionQL.SwapTrade.float_leg_end_of_month_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace FlumaionQL

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_swap_2eproto
