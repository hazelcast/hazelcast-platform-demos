// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: swap.proto

#include "../include/swap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace FlumaionQL {
PROTOBUF_CONSTEXPR SwapTrade::SwapTrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tradeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bookid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.counterparty_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fixed_leg_dcc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.float_leg_dcc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ibor_index_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fixed_leg_calendar_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.float_leg_calendar_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notional_)*/0
  , /*decltype(_impl_.payer_receiver_flag_)*/0
  , /*decltype(_impl_.settlement_date_)*/int64_t{0}
  , /*decltype(_impl_.fixed_rate_)*/0
  , /*decltype(_impl_.float_spread_)*/0
  , /*decltype(_impl_.fixed_leg_start_date_)*/int64_t{0}
  , /*decltype(_impl_.fixed_leg_end_date_)*/int64_t{0}
  , /*decltype(_impl_.fixed_leg_tenor_frequency_)*/0
  , /*decltype(_impl_.fixed_leg_tenor_period_enum_)*/0
  , /*decltype(_impl_.fixed_leg_biz_day_conv_)*/0
  , /*decltype(_impl_.fixed_leg_termination_day_conv_)*/0
  , /*decltype(_impl_.float_leg_start_date_)*/int64_t{0}
  , /*decltype(_impl_.fixed_leg_date_gen_rule_)*/0
  , /*decltype(_impl_.float_leg_tenor_frequency_)*/0
  , /*decltype(_impl_.float_leg_end_date_)*/int64_t{0}
  , /*decltype(_impl_.float_leg_tenor_period_enum_)*/0
  , /*decltype(_impl_.fixed_leg_end_of_month_flag_)*/false
  , /*decltype(_impl_.float_leg_end_of_month_flag_)*/false
  , /*decltype(_impl_.float_leg_biz_day_conv_)*/0
  , /*decltype(_impl_.float_leg_termination_day_conv_)*/0
  , /*decltype(_impl_.float_leg_date_gen_rule_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SwapTradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SwapTradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SwapTradeDefaultTypeInternal() {}
  union {
    SwapTrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SwapTradeDefaultTypeInternal _SwapTrade_default_instance_;
}  // namespace FlumaionQL
static ::_pb::Metadata file_level_metadata_swap_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_swap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_swap_2eproto = nullptr;

const uint32_t TableStruct_swap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.tradeid_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.bookid_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.counterparty_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.notional_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.payer_receiver_flag_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.settlement_date_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_rate_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_dcc_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_spread_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_dcc_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.ibor_index_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_start_date_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_end_date_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_tenor_frequency_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_tenor_period_enum_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_calendar_name_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_biz_day_conv_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_termination_day_conv_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_date_gen_rule_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.fixed_leg_end_of_month_flag_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_start_date_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_end_date_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_tenor_frequency_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_tenor_period_enum_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_calendar_name_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_biz_day_conv_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_termination_day_conv_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_date_gen_rule_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::SwapTrade, _impl_.float_leg_end_of_month_flag_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FlumaionQL::SwapTrade)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::FlumaionQL::_SwapTrade_default_instance_._instance,
};

const char descriptor_table_protodef_swap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nswap.proto\022\nFlumaionQL\"\330\006\n\tSwapTrade\022\017"
  "\n\007tradeid\030\001 \001(\t\022\016\n\006bookid\030\002 \001(\t\022\024\n\014count"
  "erparty\030\003 \001(\t\022\020\n\010notional\030\004 \001(\002\022\033\n\023payer"
  "_receiver_flag\030\005 \001(\005\022\027\n\017settlement_date\030"
  "\006 \001(\003\022\022\n\nfixed_rate\030\007 \001(\002\022\025\n\rfixed_leg_d"
  "cc\030\010 \001(\t\022\024\n\014float_spread\030\t \001(\002\022\025\n\rfloat_"
  "leg_dcc\030\n \001(\t\022\022\n\nibor_index\030\013 \001(\t\022\034\n\024fix"
  "ed_leg_start_date\030\014 \001(\003\022\032\n\022fixed_leg_end"
  "_date\030\r \001(\003\022!\n\031fixed_leg_tenor_frequency"
  "\030\016 \001(\005\022#\n\033fixed_leg_tenor_period_enum\030\017 "
  "\001(\005\022\037\n\027fixed_leg_calendar_name\030\020 \001(\t\022\036\n\026"
  "fixed_leg_biz_day_conv\030\021 \001(\005\022&\n\036fixed_le"
  "g_termination_day_conv\030\022 \001(\005\022\037\n\027fixed_le"
  "g_date_gen_rule\030\023 \001(\005\022#\n\033fixed_leg_end_o"
  "f_month_flag\030\024 \001(\010\022\034\n\024float_leg_start_da"
  "te\030\025 \001(\003\022\032\n\022float_leg_end_date\030\026 \001(\003\022!\n\031"
  "float_leg_tenor_frequency\030\027 \001(\005\022#\n\033float"
  "_leg_tenor_period_enum\030\030 \001(\005\022\037\n\027float_le"
  "g_calendar_name\030\031 \001(\t\022\036\n\026float_leg_biz_d"
  "ay_conv\030\032 \001(\005\022&\n\036float_leg_termination_d"
  "ay_conv\030\033 \001(\005\022\037\n\027float_leg_date_gen_rule"
  "\030\034 \001(\005\022#\n\033float_leg_end_of_month_flag\030\035 "
  "\001(\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_swap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_swap_2eproto = {
    false, false, 891, descriptor_table_protodef_swap_2eproto,
    "swap.proto",
    &descriptor_table_swap_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_swap_2eproto::offsets,
    file_level_metadata_swap_2eproto, file_level_enum_descriptors_swap_2eproto,
    file_level_service_descriptors_swap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_swap_2eproto_getter() {
  return &descriptor_table_swap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_swap_2eproto(&descriptor_table_swap_2eproto);
namespace FlumaionQL {

// ===================================================================

class SwapTrade::_Internal {
 public:
};

SwapTrade::SwapTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FlumaionQL.SwapTrade)
}
SwapTrade::SwapTrade(const SwapTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SwapTrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tradeid_){}
    , decltype(_impl_.bookid_){}
    , decltype(_impl_.counterparty_){}
    , decltype(_impl_.fixed_leg_dcc_){}
    , decltype(_impl_.float_leg_dcc_){}
    , decltype(_impl_.ibor_index_){}
    , decltype(_impl_.fixed_leg_calendar_name_){}
    , decltype(_impl_.float_leg_calendar_name_){}
    , decltype(_impl_.notional_){}
    , decltype(_impl_.payer_receiver_flag_){}
    , decltype(_impl_.settlement_date_){}
    , decltype(_impl_.fixed_rate_){}
    , decltype(_impl_.float_spread_){}
    , decltype(_impl_.fixed_leg_start_date_){}
    , decltype(_impl_.fixed_leg_end_date_){}
    , decltype(_impl_.fixed_leg_tenor_frequency_){}
    , decltype(_impl_.fixed_leg_tenor_period_enum_){}
    , decltype(_impl_.fixed_leg_biz_day_conv_){}
    , decltype(_impl_.fixed_leg_termination_day_conv_){}
    , decltype(_impl_.float_leg_start_date_){}
    , decltype(_impl_.fixed_leg_date_gen_rule_){}
    , decltype(_impl_.float_leg_tenor_frequency_){}
    , decltype(_impl_.float_leg_end_date_){}
    , decltype(_impl_.float_leg_tenor_period_enum_){}
    , decltype(_impl_.fixed_leg_end_of_month_flag_){}
    , decltype(_impl_.float_leg_end_of_month_flag_){}
    , decltype(_impl_.float_leg_biz_day_conv_){}
    , decltype(_impl_.float_leg_termination_day_conv_){}
    , decltype(_impl_.float_leg_date_gen_rule_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tradeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradeid().empty()) {
    _this->_impl_.tradeid_.Set(from._internal_tradeid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bookid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bookid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bookid().empty()) {
    _this->_impl_.bookid_.Set(from._internal_bookid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.counterparty_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.counterparty_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counterparty().empty()) {
    _this->_impl_.counterparty_.Set(from._internal_counterparty(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fixed_leg_dcc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fixed_leg_dcc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fixed_leg_dcc().empty()) {
    _this->_impl_.fixed_leg_dcc_.Set(from._internal_fixed_leg_dcc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.float_leg_dcc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.float_leg_dcc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_float_leg_dcc().empty()) {
    _this->_impl_.float_leg_dcc_.Set(from._internal_float_leg_dcc(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ibor_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ibor_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ibor_index().empty()) {
    _this->_impl_.ibor_index_.Set(from._internal_ibor_index(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fixed_leg_calendar_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fixed_leg_calendar_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fixed_leg_calendar_name().empty()) {
    _this->_impl_.fixed_leg_calendar_name_.Set(from._internal_fixed_leg_calendar_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.float_leg_calendar_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.float_leg_calendar_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_float_leg_calendar_name().empty()) {
    _this->_impl_.float_leg_calendar_name_.Set(from._internal_float_leg_calendar_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.notional_, &from._impl_.notional_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.float_leg_date_gen_rule_) -
    reinterpret_cast<char*>(&_impl_.notional_)) + sizeof(_impl_.float_leg_date_gen_rule_));
  // @@protoc_insertion_point(copy_constructor:FlumaionQL.SwapTrade)
}

inline void SwapTrade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tradeid_){}
    , decltype(_impl_.bookid_){}
    , decltype(_impl_.counterparty_){}
    , decltype(_impl_.fixed_leg_dcc_){}
    , decltype(_impl_.float_leg_dcc_){}
    , decltype(_impl_.ibor_index_){}
    , decltype(_impl_.fixed_leg_calendar_name_){}
    , decltype(_impl_.float_leg_calendar_name_){}
    , decltype(_impl_.notional_){0}
    , decltype(_impl_.payer_receiver_flag_){0}
    , decltype(_impl_.settlement_date_){int64_t{0}}
    , decltype(_impl_.fixed_rate_){0}
    , decltype(_impl_.float_spread_){0}
    , decltype(_impl_.fixed_leg_start_date_){int64_t{0}}
    , decltype(_impl_.fixed_leg_end_date_){int64_t{0}}
    , decltype(_impl_.fixed_leg_tenor_frequency_){0}
    , decltype(_impl_.fixed_leg_tenor_period_enum_){0}
    , decltype(_impl_.fixed_leg_biz_day_conv_){0}
    , decltype(_impl_.fixed_leg_termination_day_conv_){0}
    , decltype(_impl_.float_leg_start_date_){int64_t{0}}
    , decltype(_impl_.fixed_leg_date_gen_rule_){0}
    , decltype(_impl_.float_leg_tenor_frequency_){0}
    , decltype(_impl_.float_leg_end_date_){int64_t{0}}
    , decltype(_impl_.float_leg_tenor_period_enum_){0}
    , decltype(_impl_.fixed_leg_end_of_month_flag_){false}
    , decltype(_impl_.float_leg_end_of_month_flag_){false}
    , decltype(_impl_.float_leg_biz_day_conv_){0}
    , decltype(_impl_.float_leg_termination_day_conv_){0}
    , decltype(_impl_.float_leg_date_gen_rule_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tradeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bookid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bookid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counterparty_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.counterparty_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fixed_leg_dcc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fixed_leg_dcc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.float_leg_dcc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.float_leg_dcc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ibor_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ibor_index_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fixed_leg_calendar_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fixed_leg_calendar_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.float_leg_calendar_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.float_leg_calendar_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SwapTrade::~SwapTrade() {
  // @@protoc_insertion_point(destructor:FlumaionQL.SwapTrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SwapTrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tradeid_.Destroy();
  _impl_.bookid_.Destroy();
  _impl_.counterparty_.Destroy();
  _impl_.fixed_leg_dcc_.Destroy();
  _impl_.float_leg_dcc_.Destroy();
  _impl_.ibor_index_.Destroy();
  _impl_.fixed_leg_calendar_name_.Destroy();
  _impl_.float_leg_calendar_name_.Destroy();
}

void SwapTrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SwapTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:FlumaionQL.SwapTrade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tradeid_.ClearToEmpty();
  _impl_.bookid_.ClearToEmpty();
  _impl_.counterparty_.ClearToEmpty();
  _impl_.fixed_leg_dcc_.ClearToEmpty();
  _impl_.float_leg_dcc_.ClearToEmpty();
  _impl_.ibor_index_.ClearToEmpty();
  _impl_.fixed_leg_calendar_name_.ClearToEmpty();
  _impl_.float_leg_calendar_name_.ClearToEmpty();
  ::memset(&_impl_.notional_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.float_leg_date_gen_rule_) -
      reinterpret_cast<char*>(&_impl_.notional_)) + sizeof(_impl_.float_leg_date_gen_rule_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SwapTrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tradeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tradeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.SwapTrade.tradeid"));
        } else
          goto handle_unusual;
        continue;
      // string bookid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bookid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.SwapTrade.bookid"));
        } else
          goto handle_unusual;
        continue;
      // string counterparty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_counterparty();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.SwapTrade.counterparty"));
        } else
          goto handle_unusual;
        continue;
      // float notional = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.notional_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 payer_receiver_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.payer_receiver_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 settlement_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.settlement_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fixed_rate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.fixed_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string fixed_leg_dcc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_fixed_leg_dcc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.SwapTrade.fixed_leg_dcc"));
        } else
          goto handle_unusual;
        continue;
      // float float_spread = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.float_spread_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string float_leg_dcc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_float_leg_dcc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.SwapTrade.float_leg_dcc"));
        } else
          goto handle_unusual;
        continue;
      // string ibor_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_ibor_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.SwapTrade.ibor_index"));
        } else
          goto handle_unusual;
        continue;
      // int64 fixed_leg_start_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.fixed_leg_start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 fixed_leg_end_date = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.fixed_leg_end_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fixed_leg_tenor_frequency = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.fixed_leg_tenor_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fixed_leg_tenor_period_enum = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.fixed_leg_tenor_period_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string fixed_leg_calendar_name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_fixed_leg_calendar_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.SwapTrade.fixed_leg_calendar_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 fixed_leg_biz_day_conv = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.fixed_leg_biz_day_conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fixed_leg_termination_day_conv = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.fixed_leg_termination_day_conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fixed_leg_date_gen_rule = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.fixed_leg_date_gen_rule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool fixed_leg_end_of_month_flag = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.fixed_leg_end_of_month_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 float_leg_start_date = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.float_leg_start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 float_leg_end_date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.float_leg_end_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 float_leg_tenor_frequency = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.float_leg_tenor_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 float_leg_tenor_period_enum = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.float_leg_tenor_period_enum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string float_leg_calendar_name = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_float_leg_calendar_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.SwapTrade.float_leg_calendar_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 float_leg_biz_day_conv = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.float_leg_biz_day_conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 float_leg_termination_day_conv = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.float_leg_termination_day_conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 float_leg_date_gen_rule = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.float_leg_date_gen_rule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool float_leg_end_of_month_flag = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.float_leg_end_of_month_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SwapTrade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FlumaionQL.SwapTrade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradeid = 1;
  if (!this->_internal_tradeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradeid().data(), static_cast<int>(this->_internal_tradeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.SwapTrade.tradeid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradeid(), target);
  }

  // string bookid = 2;
  if (!this->_internal_bookid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bookid().data(), static_cast<int>(this->_internal_bookid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.SwapTrade.bookid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bookid(), target);
  }

  // string counterparty = 3;
  if (!this->_internal_counterparty().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_counterparty().data(), static_cast<int>(this->_internal_counterparty().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.SwapTrade.counterparty");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_counterparty(), target);
  }

  // float notional = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_notional = this->_internal_notional();
  uint32_t raw_notional;
  memcpy(&raw_notional, &tmp_notional, sizeof(tmp_notional));
  if (raw_notional != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_notional(), target);
  }

  // int32 payer_receiver_flag = 5;
  if (this->_internal_payer_receiver_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_payer_receiver_flag(), target);
  }

  // int64 settlement_date = 6;
  if (this->_internal_settlement_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_settlement_date(), target);
  }

  // float fixed_rate = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fixed_rate = this->_internal_fixed_rate();
  uint32_t raw_fixed_rate;
  memcpy(&raw_fixed_rate, &tmp_fixed_rate, sizeof(tmp_fixed_rate));
  if (raw_fixed_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_fixed_rate(), target);
  }

  // string fixed_leg_dcc = 8;
  if (!this->_internal_fixed_leg_dcc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixed_leg_dcc().data(), static_cast<int>(this->_internal_fixed_leg_dcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.SwapTrade.fixed_leg_dcc");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_fixed_leg_dcc(), target);
  }

  // float float_spread = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_float_spread = this->_internal_float_spread();
  uint32_t raw_float_spread;
  memcpy(&raw_float_spread, &tmp_float_spread, sizeof(tmp_float_spread));
  if (raw_float_spread != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_float_spread(), target);
  }

  // string float_leg_dcc = 10;
  if (!this->_internal_float_leg_dcc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_float_leg_dcc().data(), static_cast<int>(this->_internal_float_leg_dcc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.SwapTrade.float_leg_dcc");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_float_leg_dcc(), target);
  }

  // string ibor_index = 11;
  if (!this->_internal_ibor_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ibor_index().data(), static_cast<int>(this->_internal_ibor_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.SwapTrade.ibor_index");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_ibor_index(), target);
  }

  // int64 fixed_leg_start_date = 12;
  if (this->_internal_fixed_leg_start_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_fixed_leg_start_date(), target);
  }

  // int64 fixed_leg_end_date = 13;
  if (this->_internal_fixed_leg_end_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_fixed_leg_end_date(), target);
  }

  // int32 fixed_leg_tenor_frequency = 14;
  if (this->_internal_fixed_leg_tenor_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_fixed_leg_tenor_frequency(), target);
  }

  // int32 fixed_leg_tenor_period_enum = 15;
  if (this->_internal_fixed_leg_tenor_period_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_fixed_leg_tenor_period_enum(), target);
  }

  // string fixed_leg_calendar_name = 16;
  if (!this->_internal_fixed_leg_calendar_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixed_leg_calendar_name().data(), static_cast<int>(this->_internal_fixed_leg_calendar_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.SwapTrade.fixed_leg_calendar_name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_fixed_leg_calendar_name(), target);
  }

  // int32 fixed_leg_biz_day_conv = 17;
  if (this->_internal_fixed_leg_biz_day_conv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_fixed_leg_biz_day_conv(), target);
  }

  // int32 fixed_leg_termination_day_conv = 18;
  if (this->_internal_fixed_leg_termination_day_conv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_fixed_leg_termination_day_conv(), target);
  }

  // int32 fixed_leg_date_gen_rule = 19;
  if (this->_internal_fixed_leg_date_gen_rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_fixed_leg_date_gen_rule(), target);
  }

  // bool fixed_leg_end_of_month_flag = 20;
  if (this->_internal_fixed_leg_end_of_month_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_fixed_leg_end_of_month_flag(), target);
  }

  // int64 float_leg_start_date = 21;
  if (this->_internal_float_leg_start_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(21, this->_internal_float_leg_start_date(), target);
  }

  // int64 float_leg_end_date = 22;
  if (this->_internal_float_leg_end_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(22, this->_internal_float_leg_end_date(), target);
  }

  // int32 float_leg_tenor_frequency = 23;
  if (this->_internal_float_leg_tenor_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_float_leg_tenor_frequency(), target);
  }

  // int32 float_leg_tenor_period_enum = 24;
  if (this->_internal_float_leg_tenor_period_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_float_leg_tenor_period_enum(), target);
  }

  // string float_leg_calendar_name = 25;
  if (!this->_internal_float_leg_calendar_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_float_leg_calendar_name().data(), static_cast<int>(this->_internal_float_leg_calendar_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.SwapTrade.float_leg_calendar_name");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_float_leg_calendar_name(), target);
  }

  // int32 float_leg_biz_day_conv = 26;
  if (this->_internal_float_leg_biz_day_conv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_float_leg_biz_day_conv(), target);
  }

  // int32 float_leg_termination_day_conv = 27;
  if (this->_internal_float_leg_termination_day_conv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_float_leg_termination_day_conv(), target);
  }

  // int32 float_leg_date_gen_rule = 28;
  if (this->_internal_float_leg_date_gen_rule() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_float_leg_date_gen_rule(), target);
  }

  // bool float_leg_end_of_month_flag = 29;
  if (this->_internal_float_leg_end_of_month_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_float_leg_end_of_month_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlumaionQL.SwapTrade)
  return target;
}

size_t SwapTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlumaionQL.SwapTrade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradeid = 1;
  if (!this->_internal_tradeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradeid());
  }

  // string bookid = 2;
  if (!this->_internal_bookid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bookid());
  }

  // string counterparty = 3;
  if (!this->_internal_counterparty().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_counterparty());
  }

  // string fixed_leg_dcc = 8;
  if (!this->_internal_fixed_leg_dcc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fixed_leg_dcc());
  }

  // string float_leg_dcc = 10;
  if (!this->_internal_float_leg_dcc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_float_leg_dcc());
  }

  // string ibor_index = 11;
  if (!this->_internal_ibor_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ibor_index());
  }

  // string fixed_leg_calendar_name = 16;
  if (!this->_internal_fixed_leg_calendar_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fixed_leg_calendar_name());
  }

  // string float_leg_calendar_name = 25;
  if (!this->_internal_float_leg_calendar_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_float_leg_calendar_name());
  }

  // float notional = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_notional = this->_internal_notional();
  uint32_t raw_notional;
  memcpy(&raw_notional, &tmp_notional, sizeof(tmp_notional));
  if (raw_notional != 0) {
    total_size += 1 + 4;
  }

  // int32 payer_receiver_flag = 5;
  if (this->_internal_payer_receiver_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_payer_receiver_flag());
  }

  // int64 settlement_date = 6;
  if (this->_internal_settlement_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_settlement_date());
  }

  // float fixed_rate = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fixed_rate = this->_internal_fixed_rate();
  uint32_t raw_fixed_rate;
  memcpy(&raw_fixed_rate, &tmp_fixed_rate, sizeof(tmp_fixed_rate));
  if (raw_fixed_rate != 0) {
    total_size += 1 + 4;
  }

  // float float_spread = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_float_spread = this->_internal_float_spread();
  uint32_t raw_float_spread;
  memcpy(&raw_float_spread, &tmp_float_spread, sizeof(tmp_float_spread));
  if (raw_float_spread != 0) {
    total_size += 1 + 4;
  }

  // int64 fixed_leg_start_date = 12;
  if (this->_internal_fixed_leg_start_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fixed_leg_start_date());
  }

  // int64 fixed_leg_end_date = 13;
  if (this->_internal_fixed_leg_end_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fixed_leg_end_date());
  }

  // int32 fixed_leg_tenor_frequency = 14;
  if (this->_internal_fixed_leg_tenor_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fixed_leg_tenor_frequency());
  }

  // int32 fixed_leg_tenor_period_enum = 15;
  if (this->_internal_fixed_leg_tenor_period_enum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_fixed_leg_tenor_period_enum());
  }

  // int32 fixed_leg_biz_day_conv = 17;
  if (this->_internal_fixed_leg_biz_day_conv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fixed_leg_biz_day_conv());
  }

  // int32 fixed_leg_termination_day_conv = 18;
  if (this->_internal_fixed_leg_termination_day_conv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fixed_leg_termination_day_conv());
  }

  // int64 float_leg_start_date = 21;
  if (this->_internal_float_leg_start_date() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_float_leg_start_date());
  }

  // int32 fixed_leg_date_gen_rule = 19;
  if (this->_internal_fixed_leg_date_gen_rule() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_fixed_leg_date_gen_rule());
  }

  // int32 float_leg_tenor_frequency = 23;
  if (this->_internal_float_leg_tenor_frequency() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_float_leg_tenor_frequency());
  }

  // int64 float_leg_end_date = 22;
  if (this->_internal_float_leg_end_date() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_float_leg_end_date());
  }

  // int32 float_leg_tenor_period_enum = 24;
  if (this->_internal_float_leg_tenor_period_enum() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_float_leg_tenor_period_enum());
  }

  // bool fixed_leg_end_of_month_flag = 20;
  if (this->_internal_fixed_leg_end_of_month_flag() != 0) {
    total_size += 2 + 1;
  }

  // bool float_leg_end_of_month_flag = 29;
  if (this->_internal_float_leg_end_of_month_flag() != 0) {
    total_size += 2 + 1;
  }

  // int32 float_leg_biz_day_conv = 26;
  if (this->_internal_float_leg_biz_day_conv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_float_leg_biz_day_conv());
  }

  // int32 float_leg_termination_day_conv = 27;
  if (this->_internal_float_leg_termination_day_conv() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_float_leg_termination_day_conv());
  }

  // int32 float_leg_date_gen_rule = 28;
  if (this->_internal_float_leg_date_gen_rule() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_float_leg_date_gen_rule());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SwapTrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SwapTrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SwapTrade::GetClassData() const { return &_class_data_; }


void SwapTrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SwapTrade*>(&to_msg);
  auto& from = static_cast<const SwapTrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FlumaionQL.SwapTrade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tradeid().empty()) {
    _this->_internal_set_tradeid(from._internal_tradeid());
  }
  if (!from._internal_bookid().empty()) {
    _this->_internal_set_bookid(from._internal_bookid());
  }
  if (!from._internal_counterparty().empty()) {
    _this->_internal_set_counterparty(from._internal_counterparty());
  }
  if (!from._internal_fixed_leg_dcc().empty()) {
    _this->_internal_set_fixed_leg_dcc(from._internal_fixed_leg_dcc());
  }
  if (!from._internal_float_leg_dcc().empty()) {
    _this->_internal_set_float_leg_dcc(from._internal_float_leg_dcc());
  }
  if (!from._internal_ibor_index().empty()) {
    _this->_internal_set_ibor_index(from._internal_ibor_index());
  }
  if (!from._internal_fixed_leg_calendar_name().empty()) {
    _this->_internal_set_fixed_leg_calendar_name(from._internal_fixed_leg_calendar_name());
  }
  if (!from._internal_float_leg_calendar_name().empty()) {
    _this->_internal_set_float_leg_calendar_name(from._internal_float_leg_calendar_name());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_notional = from._internal_notional();
  uint32_t raw_notional;
  memcpy(&raw_notional, &tmp_notional, sizeof(tmp_notional));
  if (raw_notional != 0) {
    _this->_internal_set_notional(from._internal_notional());
  }
  if (from._internal_payer_receiver_flag() != 0) {
    _this->_internal_set_payer_receiver_flag(from._internal_payer_receiver_flag());
  }
  if (from._internal_settlement_date() != 0) {
    _this->_internal_set_settlement_date(from._internal_settlement_date());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fixed_rate = from._internal_fixed_rate();
  uint32_t raw_fixed_rate;
  memcpy(&raw_fixed_rate, &tmp_fixed_rate, sizeof(tmp_fixed_rate));
  if (raw_fixed_rate != 0) {
    _this->_internal_set_fixed_rate(from._internal_fixed_rate());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_float_spread = from._internal_float_spread();
  uint32_t raw_float_spread;
  memcpy(&raw_float_spread, &tmp_float_spread, sizeof(tmp_float_spread));
  if (raw_float_spread != 0) {
    _this->_internal_set_float_spread(from._internal_float_spread());
  }
  if (from._internal_fixed_leg_start_date() != 0) {
    _this->_internal_set_fixed_leg_start_date(from._internal_fixed_leg_start_date());
  }
  if (from._internal_fixed_leg_end_date() != 0) {
    _this->_internal_set_fixed_leg_end_date(from._internal_fixed_leg_end_date());
  }
  if (from._internal_fixed_leg_tenor_frequency() != 0) {
    _this->_internal_set_fixed_leg_tenor_frequency(from._internal_fixed_leg_tenor_frequency());
  }
  if (from._internal_fixed_leg_tenor_period_enum() != 0) {
    _this->_internal_set_fixed_leg_tenor_period_enum(from._internal_fixed_leg_tenor_period_enum());
  }
  if (from._internal_fixed_leg_biz_day_conv() != 0) {
    _this->_internal_set_fixed_leg_biz_day_conv(from._internal_fixed_leg_biz_day_conv());
  }
  if (from._internal_fixed_leg_termination_day_conv() != 0) {
    _this->_internal_set_fixed_leg_termination_day_conv(from._internal_fixed_leg_termination_day_conv());
  }
  if (from._internal_float_leg_start_date() != 0) {
    _this->_internal_set_float_leg_start_date(from._internal_float_leg_start_date());
  }
  if (from._internal_fixed_leg_date_gen_rule() != 0) {
    _this->_internal_set_fixed_leg_date_gen_rule(from._internal_fixed_leg_date_gen_rule());
  }
  if (from._internal_float_leg_tenor_frequency() != 0) {
    _this->_internal_set_float_leg_tenor_frequency(from._internal_float_leg_tenor_frequency());
  }
  if (from._internal_float_leg_end_date() != 0) {
    _this->_internal_set_float_leg_end_date(from._internal_float_leg_end_date());
  }
  if (from._internal_float_leg_tenor_period_enum() != 0) {
    _this->_internal_set_float_leg_tenor_period_enum(from._internal_float_leg_tenor_period_enum());
  }
  if (from._internal_fixed_leg_end_of_month_flag() != 0) {
    _this->_internal_set_fixed_leg_end_of_month_flag(from._internal_fixed_leg_end_of_month_flag());
  }
  if (from._internal_float_leg_end_of_month_flag() != 0) {
    _this->_internal_set_float_leg_end_of_month_flag(from._internal_float_leg_end_of_month_flag());
  }
  if (from._internal_float_leg_biz_day_conv() != 0) {
    _this->_internal_set_float_leg_biz_day_conv(from._internal_float_leg_biz_day_conv());
  }
  if (from._internal_float_leg_termination_day_conv() != 0) {
    _this->_internal_set_float_leg_termination_day_conv(from._internal_float_leg_termination_day_conv());
  }
  if (from._internal_float_leg_date_gen_rule() != 0) {
    _this->_internal_set_float_leg_date_gen_rule(from._internal_float_leg_date_gen_rule());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SwapTrade::CopyFrom(const SwapTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlumaionQL.SwapTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapTrade::IsInitialized() const {
  return true;
}

void SwapTrade::InternalSwap(SwapTrade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradeid_, lhs_arena,
      &other->_impl_.tradeid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bookid_, lhs_arena,
      &other->_impl_.bookid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.counterparty_, lhs_arena,
      &other->_impl_.counterparty_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fixed_leg_dcc_, lhs_arena,
      &other->_impl_.fixed_leg_dcc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.float_leg_dcc_, lhs_arena,
      &other->_impl_.float_leg_dcc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ibor_index_, lhs_arena,
      &other->_impl_.ibor_index_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fixed_leg_calendar_name_, lhs_arena,
      &other->_impl_.fixed_leg_calendar_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.float_leg_calendar_name_, lhs_arena,
      &other->_impl_.float_leg_calendar_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SwapTrade, _impl_.float_leg_date_gen_rule_)
      + sizeof(SwapTrade::_impl_.float_leg_date_gen_rule_)
      - PROTOBUF_FIELD_OFFSET(SwapTrade, _impl_.notional_)>(
          reinterpret_cast<char*>(&_impl_.notional_),
          reinterpret_cast<char*>(&other->_impl_.notional_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapTrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_swap_2eproto_getter, &descriptor_table_swap_2eproto_once,
      file_level_metadata_swap_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace FlumaionQL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FlumaionQL::SwapTrade*
Arena::CreateMaybeMessage< ::FlumaionQL::SwapTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FlumaionQL::SwapTrade >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
