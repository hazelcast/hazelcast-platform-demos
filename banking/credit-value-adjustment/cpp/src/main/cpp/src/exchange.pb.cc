// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: exchange.proto

#include "../include/exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace FlumaionQL {
PROTOBUF_CONSTEXPR DataExchange::DataExchange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.curvefile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.fixingfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradefile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.evaldate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resultsfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scenarioid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tradeid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataExchangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataExchangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataExchangeDefaultTypeInternal() {}
  union {
    DataExchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataExchangeDefaultTypeInternal _DataExchange_default_instance_;
}  // namespace FlumaionQL
static ::_pb::Metadata file_level_metadata_exchange_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_exchange_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_exchange_2eproto = nullptr;

const uint32_t TableStruct_exchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::DataExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::DataExchange, _impl_.curvefile_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::DataExchange, _impl_.fixingfile_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::DataExchange, _impl_.tradefile_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::DataExchange, _impl_.evaldate_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::DataExchange, _impl_.resultsfile_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::DataExchange, _impl_.scenarioid_),
  PROTOBUF_FIELD_OFFSET(::FlumaionQL::DataExchange, _impl_.tradeid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::FlumaionQL::DataExchange)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::FlumaionQL::_DataExchange_default_instance_._instance,
};

const char descriptor_table_protodef_exchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016exchange.proto\022\nFlumaionQL\"\224\001\n\014DataExc"
  "hange\022\021\n\tcurvefile\030\001 \001(\t\022\022\n\nfixingfile\030\002"
  " \001(\t\022\021\n\ttradefile\030\003 \001(\t\022\020\n\010evaldate\030\004 \001("
  "\t\022\023\n\013resultsfile\030\005 \001(\t\022\022\n\nscenarioid\030\006 \001"
  "(\t\022\017\n\007tradeid\030\007 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_exchange_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_exchange_2eproto = {
    false, false, 187, descriptor_table_protodef_exchange_2eproto,
    "exchange.proto",
    &descriptor_table_exchange_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_exchange_2eproto::offsets,
    file_level_metadata_exchange_2eproto, file_level_enum_descriptors_exchange_2eproto,
    file_level_service_descriptors_exchange_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_exchange_2eproto_getter() {
  return &descriptor_table_exchange_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_exchange_2eproto(&descriptor_table_exchange_2eproto);
namespace FlumaionQL {

// ===================================================================

class DataExchange::_Internal {
 public:
};

DataExchange::DataExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FlumaionQL.DataExchange)
}
DataExchange::DataExchange(const DataExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataExchange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.curvefile_){}
    , decltype(_impl_.fixingfile_){}
    , decltype(_impl_.tradefile_){}
    , decltype(_impl_.evaldate_){}
    , decltype(_impl_.resultsfile_){}
    , decltype(_impl_.scenarioid_){}
    , decltype(_impl_.tradeid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.curvefile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.curvefile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_curvefile().empty()) {
    _this->_impl_.curvefile_.Set(from._internal_curvefile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.fixingfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fixingfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fixingfile().empty()) {
    _this->_impl_.fixingfile_.Set(from._internal_fixingfile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradefile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradefile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradefile().empty()) {
    _this->_impl_.tradefile_.Set(from._internal_tradefile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.evaldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.evaldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_evaldate().empty()) {
    _this->_impl_.evaldate_.Set(from._internal_evaldate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resultsfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resultsfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resultsfile().empty()) {
    _this->_impl_.resultsfile_.Set(from._internal_resultsfile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scenarioid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scenarioid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scenarioid().empty()) {
    _this->_impl_.scenarioid_.Set(from._internal_scenarioid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tradeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tradeid().empty()) {
    _this->_impl_.tradeid_.Set(from._internal_tradeid(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FlumaionQL.DataExchange)
}

inline void DataExchange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.curvefile_){}
    , decltype(_impl_.fixingfile_){}
    , decltype(_impl_.tradefile_){}
    , decltype(_impl_.evaldate_){}
    , decltype(_impl_.resultsfile_){}
    , decltype(_impl_.scenarioid_){}
    , decltype(_impl_.tradeid_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.curvefile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.curvefile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fixingfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.fixingfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradefile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradefile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.evaldate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.evaldate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resultsfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resultsfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scenarioid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scenarioid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tradeid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tradeid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataExchange::~DataExchange() {
  // @@protoc_insertion_point(destructor:FlumaionQL.DataExchange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.curvefile_.Destroy();
  _impl_.fixingfile_.Destroy();
  _impl_.tradefile_.Destroy();
  _impl_.evaldate_.Destroy();
  _impl_.resultsfile_.Destroy();
  _impl_.scenarioid_.Destroy();
  _impl_.tradeid_.Destroy();
}

void DataExchange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:FlumaionQL.DataExchange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.curvefile_.ClearToEmpty();
  _impl_.fixingfile_.ClearToEmpty();
  _impl_.tradefile_.ClearToEmpty();
  _impl_.evaldate_.ClearToEmpty();
  _impl_.resultsfile_.ClearToEmpty();
  _impl_.scenarioid_.ClearToEmpty();
  _impl_.tradeid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataExchange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string curvefile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_curvefile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.DataExchange.curvefile"));
        } else
          goto handle_unusual;
        continue;
      // string fixingfile = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fixingfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.DataExchange.fixingfile"));
        } else
          goto handle_unusual;
        continue;
      // string tradefile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tradefile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.DataExchange.tradefile"));
        } else
          goto handle_unusual;
        continue;
      // string evaldate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_evaldate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.DataExchange.evaldate"));
        } else
          goto handle_unusual;
        continue;
      // string resultsfile = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_resultsfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.DataExchange.resultsfile"));
        } else
          goto handle_unusual;
        continue;
      // string scenarioid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_scenarioid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.DataExchange.scenarioid"));
        } else
          goto handle_unusual;
        continue;
      // string tradeid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_tradeid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FlumaionQL.DataExchange.tradeid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataExchange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FlumaionQL.DataExchange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string curvefile = 1;
  if (!this->_internal_curvefile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_curvefile().data(), static_cast<int>(this->_internal_curvefile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.DataExchange.curvefile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_curvefile(), target);
  }

  // string fixingfile = 2;
  if (!this->_internal_fixingfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fixingfile().data(), static_cast<int>(this->_internal_fixingfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.DataExchange.fixingfile");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fixingfile(), target);
  }

  // string tradefile = 3;
  if (!this->_internal_tradefile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradefile().data(), static_cast<int>(this->_internal_tradefile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.DataExchange.tradefile");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tradefile(), target);
  }

  // string evaldate = 4;
  if (!this->_internal_evaldate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_evaldate().data(), static_cast<int>(this->_internal_evaldate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.DataExchange.evaldate");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_evaldate(), target);
  }

  // string resultsfile = 5;
  if (!this->_internal_resultsfile().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resultsfile().data(), static_cast<int>(this->_internal_resultsfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.DataExchange.resultsfile");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_resultsfile(), target);
  }

  // string scenarioid = 6;
  if (!this->_internal_scenarioid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scenarioid().data(), static_cast<int>(this->_internal_scenarioid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.DataExchange.scenarioid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_scenarioid(), target);
  }

  // string tradeid = 7;
  if (!this->_internal_tradeid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradeid().data(), static_cast<int>(this->_internal_tradeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FlumaionQL.DataExchange.tradeid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_tradeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FlumaionQL.DataExchange)
  return target;
}

size_t DataExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlumaionQL.DataExchange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string curvefile = 1;
  if (!this->_internal_curvefile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_curvefile());
  }

  // string fixingfile = 2;
  if (!this->_internal_fixingfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fixingfile());
  }

  // string tradefile = 3;
  if (!this->_internal_tradefile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradefile());
  }

  // string evaldate = 4;
  if (!this->_internal_evaldate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_evaldate());
  }

  // string resultsfile = 5;
  if (!this->_internal_resultsfile().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resultsfile());
  }

  // string scenarioid = 6;
  if (!this->_internal_scenarioid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scenarioid());
  }

  // string tradeid = 7;
  if (!this->_internal_tradeid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataExchange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataExchange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataExchange::GetClassData() const { return &_class_data_; }


void DataExchange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataExchange*>(&to_msg);
  auto& from = static_cast<const DataExchange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FlumaionQL.DataExchange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_curvefile().empty()) {
    _this->_internal_set_curvefile(from._internal_curvefile());
  }
  if (!from._internal_fixingfile().empty()) {
    _this->_internal_set_fixingfile(from._internal_fixingfile());
  }
  if (!from._internal_tradefile().empty()) {
    _this->_internal_set_tradefile(from._internal_tradefile());
  }
  if (!from._internal_evaldate().empty()) {
    _this->_internal_set_evaldate(from._internal_evaldate());
  }
  if (!from._internal_resultsfile().empty()) {
    _this->_internal_set_resultsfile(from._internal_resultsfile());
  }
  if (!from._internal_scenarioid().empty()) {
    _this->_internal_set_scenarioid(from._internal_scenarioid());
  }
  if (!from._internal_tradeid().empty()) {
    _this->_internal_set_tradeid(from._internal_tradeid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataExchange::CopyFrom(const DataExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlumaionQL.DataExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataExchange::IsInitialized() const {
  return true;
}

void DataExchange::InternalSwap(DataExchange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.curvefile_, lhs_arena,
      &other->_impl_.curvefile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.fixingfile_, lhs_arena,
      &other->_impl_.fixingfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradefile_, lhs_arena,
      &other->_impl_.tradefile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.evaldate_, lhs_arena,
      &other->_impl_.evaldate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resultsfile_, lhs_arena,
      &other->_impl_.resultsfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scenarioid_, lhs_arena,
      &other->_impl_.scenarioid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tradeid_, lhs_arena,
      &other->_impl_.tradeid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DataExchange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_exchange_2eproto_getter, &descriptor_table_exchange_2eproto_once,
      file_level_metadata_exchange_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace FlumaionQL
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::FlumaionQL::DataExchange*
Arena::CreateMaybeMessage< ::FlumaionQL::DataExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FlumaionQL::DataExchange >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
